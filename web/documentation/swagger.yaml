openapi: 3.0.0
servers:
  - description: Base URL template
    url: '{protocol}://{domain}/{version}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
        description: 'The CloudOne API is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.'
      domain:
        default: 'api.cloudone.com'
      version:
        default: 'v4'

info:
  title: 'CloudOne API Service'
  description: "The CloudOne API allows you to interact with our call center including creating dealer accounts and campaigns.
    \n\n
    Since the API is based on REST principles, it's very easy to write and test applications. You can use your browser to access URLs, and you can use pretty much any HTTP client in any programming language to interact with the API.
    \n\n
    All API calls use API key and IP restriction. Prior to use you will need to supply your IP addresses to your account representative so they can be added to your account."
  version: '1.0.0'
  contact:
    email: you@your-company.com

security:
  - client_id: []
  - api_key: []

tags:
  - name: hidden
    description: 'Only for internal use'

  - name: Activation
    description: 'You are able to add and delete activation for your campaigns.'

  - name: Alert
    description: "You are able to add, list and delete alerts for your campaigns.\n\n
      If there is a CRM that you would like added please email support@cloudone.com"

  - name: Call
    description: 'You are able get a list of calls.'
    
  - name: Campaign
    description: 'You are able to add, list, get info, and update your campaigns.'

  - name: Dealer
    description: 'You are able to add, list, get info, and update dealers under your client id.'

  - name: Lead
    description: 'You are able to add, list, Get info, stop work.'

  - name: Phone
    description: 'You are able to add, delete, and get_info.'

  - name: User
    description: 'You are able to add, list, get info, update and delete users for your dealers.'

paths:
  '/agents':
    post:
      tags:
          - hidden
      operationId: addAgent
      description: 'You are able to add agent.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
            example: 
              {
                "name_first": "Emanuele",
                "name_last": "Spooner",
                "username": "bryan_agent",
                "password": "123##",
                "email": "test@example.com",
                "phone_home": "9876543210",
                "phone_cell": "1234567890",
                "phone_office": "0123456789",
                "agent_type": "digital",
                "active": "1",
                "lead_id": "0",
                "time_zone": "US/Pacific",
                "skill_level": "3",
                "tier": "3",
                "carnow_agent_id": "0",
                "training": "0",
                "outside_login": "1",
                "text_access": "0",
                "email_access": "0",
                "over_night": "0",
                "lead_search": "0",
                "part_time": "0",
                "max_digital_tasks": "10",
                "payrate": "10.75",
                "start_date": "2016-06-10 07:00:00",
                "payroll_id": "0",
                "address": "2105 C St.4",
                "address2": "",
                "city": "Vancouver",
                "state": "WA",
                "zip": "98663"
              }
        description: 'Agent info'
      responses:
        '200':
          description: 'Agent has been added successfully'
          content:
            application/json:
              example: 
                {
                  "agent_id": "54321"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
  '/agents/{id}':
    get:
      tags:
          - hidden
      operationId: getAgentById
      description: 'You are able to get agent info by id.'
      parameters:
        - name: id
          in: path
          description: 'Agent ID'
          required: true
          schema:
            type: string
            example: 54321
      responses:
        '200':
          description: 'Returns agent info'
          content:
            application/json:
              example: 
                {
                  "agent_id": "54321",
                  "name_first": "Emanuele",
                  "name_last": "Spooner",
                  "username": "bryan_agent",
                  "password": "123##",
                  "email": "test@example.com",
                  "phone_home": "9876543210",
                  "phone_cell": "1234567890",
                  "phone_office": "0123456789",
                  "agent_type": "digital",
                  "active": "1",
                  "lead_id": "0",
                  "time_zone": "US/Pacific",
                  "skill_level": "3",
                  "tier": "3",
                  "carnow_agent_id": "0",
                  "training": "0",
                  "outside_login": "1",
                  "text_access": "0",
                  "email_access": "0",
                  "over_night": "0",
                  "lead_search": "0",
                  "part_time": "0",
                  "max_digital_tasks": "10",
                  "payrate": "10.75",
                  "start_date": "2016-06-10 07:00:00",
                  "payroll_id": "0",
                  "address": "2105 C St.4",
                  "address2": "",
                  "city": "Vancouver",
                  "state": "WA",
                  "zip": "98663",
                  "stage": "2",
                  "belt_level": "4",
                  "scripts": {
                    "script_id": "1",
                    "trained": "1",
                    "inbound": "1",
                    "outbound": "1"
                  },
                  "languages": ["en", "es"]
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Agent is not found'
    put:
      tags:
          - hidden
      operationId: updateAgentById
      description: 'You are able to add agent.'
      parameters:
        - name: id
          in: path
          description: 'Agent ID'
          required: true
          schema:
            type: string
            example: 54321
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Agent'
              type: object
              properties:
                door_access:
                  type: object
                  properties:
                    door_id:
                      type: integer
                      example: 1
                    active:
                      type: boolean
                      example: 1
                    start_hour:
                      type: integer
                      example: 10
                    end_hour:
                      type: integer
                      example: 15
                stage:
                  type: integer
                  example: 2
                belt_level:
                  type: integer
                  example: 4
                scripts:
                  type: object
                  properties:
                    script_id:
                      type: integer
                      example: 1
                    trained:
                      type: boolean
                      example: 1
                    inbound:
                      type: boolean
                      example: 1
                    outbound:
                      type: boolean
                      example: 1
                languages:
                  type: array
                  items:
                    type: string
                  example: ['en', 'es']
            example: 
              {
                "name_first": "Emanuele",
                "name_last": "Spooner",
                "username": "bryan_agent",
                "password": "123##",
                "email": "test@example.com",
                "phone_home": "9876543210",
                "phone_cell": "1234567890",
                "phone_office": "0123456789",
                "agent_type": "digital",
                "active": "1",
                "lead_id": "0",
                "time_zone": "US/Pacific",
                "skill_level": "3",
                "tier": "3",
                "carnow_agent_id": "0",
                "training": "0",
                "outside_login": "1",
                "text_access": "0",
                "email_access": "0",
                "over_night": "0",
                "lead_search": "0",
                "part_time": "0",
                "max_digital_tasks": "10",
                "payrate": "10.75",
                "start_date": "2016-06-10 07:00:00",
                "payroll_id": "0",
                "address": "2105 C St.4",
                "address2": "",
                "city": "Vancouver",
                "state": "WA",
                "zip": "98663",
                "door_access": {
                  "door_id": "1",
                  "active": "1",
                  "start_hour": "10",
                  "end_hour": "15"
                },
                "stage": "2",
                "belt_level": "4",
                "scripts": {
                  "script_id": "1",
                  "trained": "1",
                  "inbound": "1",
                  "outbound": "1"
                },
                "languages": ["en", "es"]
              }
        description: 'Agent info'
      responses:
        '200':
          description: 'Agent has been updated successfully'
          content:
            application/json:
              example: 
                {
                  "agent_id": "54321",
                  "name_first": "Emanuele",
                  "name_last": "Spooner",
                  "username": "bryan_agent",
                  "password": "123##",
                  "email": "test@example.com",
                  "phone_home": "9876543210",
                  "phone_cell": "1234567890",
                  "phone_office": "0123456789",
                  "agent_type": "digital",
                  "active": "1",
                  "lead_id": "0",
                  "time_zone": "US/Pacific",
                  "skill_level": "3",
                  "tier": "3",
                  "carnow_agent_id": "0",
                  "training": "0",
                  "outside_login": "1",
                  "text_access": "0",
                  "email_access": "0",
                  "over_night": "0",
                  "lead_search": "0",
                  "part_time": "0",
                  "max_digital_tasks": "10",
                  "payrate": "10.75",
                  "start_date": "2016-06-10 07:00:00",
                  "payroll_id": "0",
                  "address": "2105 C St.4",
                  "address2": "",
                  "city": "Vancouver",
                  "state": "WA",
                  "zip": "98663",
                  "door_access": {
                    "door_id": "1",
                    "active": "1",
                    "start_hour": "10",
                    "end_hour": "15"
                  },
                  "stage": "2",
                  "belt_level": "4",
                  "scripts": {
                    "script_id": "1",
                    "trained": "1",
                    "inbound": "1",
                    "outbound": "1"
                  },
                  "languages": ["en", "es"]
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Agent is not found'
  '/data/email':
    get:
      tags:
          - hidden
      operationId: getDataEmail
      description: 'You are able to get email from household_data.'
      parameters:
        - name: name_first
          in: query
          required: true
          schema:
            type: string
            maxLength: 50
            example: 'Test'
        - name: name_last
          in: query
          required: true
          schema:
            type: string
            maxLength: 50
            example: 'Testington'
        - name: address
          in: query
          required: true
          schema:
            type: string
            maxLength: 100
            example: '123 Fake St'
        - name: city
          in: query
          required: true
          schema:
            type: string
            maxLength: 50
            example: 'Vancouver'
        - name: state
          in: query
          required: true
          schema:
            type: string
            maxLength: 2
            example: 'NY'
        - name: zip
          in: query
          required: true
          schema:
            type: integer
            minimum: 10000
            maximum: 99999
            example: 98663
      responses:
        '200':
          description: 'Returns email'
          content:
            application/json:
              example: 
                { "email": "test@example.com" }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'No email found'
  '/data/phone':
    get:
      tags:
          - hidden
      operationId: getDataPhone
      description: 'You are able to get phone from household_data.'
      parameters:
        - name: name_first
          in: query
          required: true
          schema:
            type: string
            maxLength: 50
            example: 'Test'
        - name: name_last
          in: query
          required: true
          schema:
            type: string
            maxLength: 50
            example: 'Testington'
        - name: address
          in: query
          required: true
          schema:
            type: string
            maxLength: 100
            example: '123 Fake St'
        - name: city
          in: query
          required: true
          schema:
            type: string
            maxLength: 50
            example: 'Vancouver'
        - name: state
          in: query
          required: true
          schema:
            type: string
            maxLength: 2
            example: 'NY'
        - name: zip
          in: query
          required: true
          schema:
            type: integer
            minimum: 10000
            maximum: 99999
            example: 98663
      responses:
        '200':
          description: 'Returns phone'
          content:
            application/json:
              example: 
                { "phone": "9497273200" }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'No phone found'
  '/data/blackbook':
    get:
      tags:
          - hidden
      operationId: getDataBlackbook
      description: 'You are able to get blackbook info.'
      parameters:
        - name: vin
          in: query
          required: true
          schema:
            type: string
            maxLength: 17
            example: 'JH4DC4459YS015522'
        - name: zip
          in: query
          schema:
            type: integer
            minimum: 10000
            maximum: 99999
            example: 98663
        - name: state
          in: query
          schema:
            type: string
            maxLength: 2
            example: 'NY'
        - name: mileage
          in: query
          schema:
            type: integer
            example: 60000
      responses:
        '200':
          description: 'Returns cars info'
          content:
            application/json:
              example: 
                [
                  {
                    "car": {
                      "year": "Year", 
                      "make": "Make",
                      "model": "Model", 
                      "style": "Style",
                      "msrp": "MSRP",
                      "tradein_clean": "TradeInClean", 
                      "tradein_average": "TradeInAverage",
                      "tradein_rough": "TradeInRough"
                    }
                  }
                ]
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  '/dealer/alerts':
    post:
      tags:
        - hidden
      operationId: addDealerAlert
      description: 'You are able to add alerts for dealers.'
      parameters:
        - name: id
          in: path
          description: 'Dealer ID'
          required: true
          schema:
            type: string
            example: 123456
      requestBody:
        description: 'Alert info'
        content:
          application/json:
            schema:
              type: object
              required:
                - category
              properties:
                category:
                  description: |
                    categories:
                     * `email` - type and email fields are required
                     * `sms` - number and name fields are required
                     * `crm_email` - type and address fields are required
                     * `crm_post` - type and number fields are required
                  type: string
                  maxLength: 100
                type:
                  type: string
                  maxLength: 30
                email:
                  type: string
                  maxLength: 100
                number:
                  type: string
                  maxLength: 100
                name:
                  type: string
                  maxLength: 100
                address:
                  type: string
                  maxLength: 100
            example:
              {
                "category": "sms",
                "number": "3149834592",
                "name": "work cell"
              }
      responses:
        '200':
          description: 'Alert has been added successfully'
          content:
            application/json:
              example: 
                {
                  "alert_id": "1153"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Dealer is not found'
  '/dealer/alerts/{id}':
    delete:
      tags:
        - hidden
      operationId: deleteDealerAlert
      description: 'You are able to delete alert by id for dealer.'
      parameters:
        - name: id
          in: path
          description: 'Alert ID'
          required: true
          schema:
            type: string
            example: 1153
      responses:
        '200':
          description: 'Alert has been deleted successfully'
          content:
            application/json:
              example: 
                {
                  "alert_id": "1153"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Alert is not found'
  '/dealers/search':
    get:
      tags:
          - hidden
      operationId: searchDealers
      description: 'You are able to search dealers by client_id.'
      responses:
        '200':
          description: 'Returns a list of dealers'
          content:
            application/json:
              example: 
                [
                  {
                    "dealer_id": "1234567",
                    "name": "Test Dealer 1"
                  },
                  {
                    "dealer_id": "2345678",
                    "name": "Test Dealer 2"
                  }
                ]
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  '/phones/search':
    get:
      tags:
          - hidden
      operationId: searchPhones
      description: 'You are able to search phones by zip and/or area_code.'
      parameters:
        - name: area_code
          in: query
          description: 'Area Code'
          required: true
          schema:
            type: integer
            minimum: 100
            maximum: 999
            example: 346
        - name: zip_code
          in: query
          description: 'Zip Code'
          schema:
            type: integer
            minimum: 10000
            maximum: 99999
            example: 12345
      responses:
        '200':
          description: 'Returns a list of phones'
          content:
            application/json:
              example: 
                [
                  {
                    "phone_number": "5551111111",
                    "city": "Platteville",
                    "zip": "80651"
                  },
                  {
                    "phone_number": "5552222222",
                    "city": "LAS VEGAS",
                    "zip": "89139"
                  }
               ]
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Unable to find phone numbers in the specified area.'
  '/phones/buy/{phone_number}':
    post:
      tags:
        - hidden
      operationId: buyPhone
      description: 'You are able to buy phone number.'
      parameters:
        - name: phone_number
          in: path
          required: true
          description: 'Phone Number of the campaign'
          schema:
            type: integer
            minimum: 1000000000
            maximum: 9999999999
            example: 5551111111
        - name: campaign_id
          in: header
          description: 'Campaign ID'
          required: true
          schema:
            type: integer
            example: 654321
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - label
              properties:
                label:
                  type: string
                  example: "Test Number"
                redirect_number:
                  type: integer
                  example: 5551234567
                whisper:
                  type: boolean
                  example: true
                phone_type:
                  description: "1 = Call Center,\n\n
                    2 = Call Forward,\n\n
                    3 = IVR,\n\n
                    4 = IVR + Call Center.\n\n
                    If you set phone_type = 1, the redirect_number will be removed."
                  type: integer
                  minimum: 1
                  maximum: 4
                  example: 1
            example: 
              {
                "label": "Test Number",
                "redirect_number": 5551234567,
                "whisper": true,
                "phone_type": 2
              }
      responses:
        '200':
          description: 'Phone has been bought successfully'
          content:
            application/json:
              example: 
                {
                  "phone_sid": "PNea7ee8066b5d2157594e0228eda7b2c6"
                }
        '400':
          description: 'Unable to acquire phone number'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Campaign is not found'
  '/leads/{id}/action':
    post:
      tags:
        - hidden
      operationId: applyLeadActionById
      description: 'You are able to apply lead action by id.'
      parameters:
        - name: id
          in: path
          description: 'lead_id field'
          required: true
          schema:
            type: string
            example: 123456
        - name: campaign_id
          in: header
          description: 'Campaign ID'
          required: true
          schema:
            type: string
            example: 4
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - action
              properties:
                action:
                  type: string
                  example: 'Campaign Report'
              example: 
                {
                  "action": "Campaign Report"
                }
        description: 'Action to apply'
      responses:
        '200':
          description: 'Campaign Report'
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: string
                  response:
                    type: string
                  contact:
                    type: string
                  contact_summary:
                    type: string
              example:
                {
                  "summary": "",
                  "response": "",
                  "contact": "",
                  "contact_summary": ""
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Lead or Campaign ID is not found'
  '/leads/{id}/send_followup':
    get:
      tags:
        - hidden
      operationId: sendFollowupLeadById
      description: 'You are able to send followup for lead by id.'
      parameters:
        - name: id
          in: path
          description: 'lead_id field'
          required: true
          schema:
            type: string
            example: 123456
        - name: destination
          in: query
          description: 'url field'
          required: true
          schema:
            type: string
        - name: debug
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: 'Followup data'
          content:
            application/json:
              schema:
                type: object
                properties:
                  external_id:
                    type: string
                  lead_id:
                    type: string
                  followup_date:
                    type: string
                  followup:
                    type: string
              example:
                {
                  "external_id": "",
                  "lead_id": "",
                  "followup_date": "",
                  "followup": ""
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Lead is not found'
  '/leads/{id}/send_lead':
    get:
      tags:
        - hidden
      operationId: sendLeadById
      description: |
        You are able to send lead info to destination url.\
        \
        Possible lead_status:
        - Appointment
        - In Contact
        - Transferred To Dealer
        - Dealer Needs To Call Back
        - Not Interested
        - Appointment Canceled
        - Opt Out
        - No Contact
        - Duplicate Lead
        - Invalid Lead
        
        <details>
          <summary>
            **Sample POST** (Click to expand)
          </summary>
          ```
          {
            "action": "New Lead",
            "test_mode": "1",
            "external_id": "1234567",
            "campaign_id": "8",
            "external_campaign_id": "",
            "customer_id": "",
            "external_customer_id": "",
            "lead_id": "1234",
            "time_zone": "US\/Pacific",
            "language": "en",
            "source": "CreditYes",
            "name_first": "John",
            "name_middle": "T",
            "name_last": "Smith",
            "ssn": "111223333",
            "credit_permission": "1",
            "birth_month": "7",
            "birth_day": "11",
            "birth_year": "1978",
            "coapp_relation": "Wife",
            "coapp_income": "3000",
            "phone_home": "1112223333",
            "phone_work": "2223334444",
            "phone_cell": "3334445555",
            "preferred_phone": "Home",
            "confirmation_pref": "Text",
            "email_address": "test@example.com",
            "street_address": "123 Fake St",
            "city": "Portland",
            "state": "OR",
            "zip_code": "99999",
            "years_at_address": "5",
            "months_at_address": "2",
            "residence_status": "Rent",
            "persons_on_agreement": "2",
            "housing_payment": "850",
            "rent_total": "850",
            "prev_street_address": "321 Fake St",
            "prev_city": "Portland",
            "prev_state": "OR",
            "prev_zip_code": "90000",
            "years_at_prev_address": "3",
            "months_at_prev_address": "11",
            "jobs": {
              "job": {
                "employer": "My Company",
                "occupation": "My Occupation",
                "years_at_employer": "5",
                "months_at_employer": "2",
                "pay_method": "Direct",
                "paycheck_type": "Computerized",
                "taxes_withheld": "1",
                "employment_status": "Permanent",
                "monthly_income": "3000"
              }
            },
            "vehicles": {
              "vehicle": [
                {
                  "type": "tradein",
                  "year": "2016",
                  "make": "Toyota",
                  "model": "Corolla",
                  "vin": "2T1BURHE6GC555164",
                  "trim": "S Plus",
                  "mileage": "0",
                  "exterior_color": "Black Sand Pearl",
                  "interior_color": "Silver",
                  "condition": "Excellent",
                  "monthly_payment": "0",
                  "amount_owed": "0",
                  "retail": "30000",
                  "wholesale": "20000",
                  "book": "15000"
                },
                {
                  "type": "interested",
                  "year": "2016",
                  "make": "Toyota",
                  "model": "Sienna",
                  "vin": "",
                  "trim": "XLE",
                  "mileage": "0",
                  "exterior_color": "Red",
                  "interior_color": "Blue",
                  "condition": "New"
                }
              ]
            },
            "other_monthly_income": "1000",
            "years_at_prev_employer": "5",
            "months_at_prev_employer": "2",
            "prev_employer": "Previous Company",
            "employment_gap": "3",
            "trade_year": "1999",
            "trade_make": "Pontiac",
            "trade_model": "Grand Am",
            "trade_mileage": "95000",
            "trade_monthly_payment": "300",
            "trade_color": "Silver",
            "trade_retail": "3000",
            "trade_wholesale": "2000",
            "trade_book": "Blue Book",
            "military": "0",
            "military_months_of_service": "0",
            "military_pay_grade": "",
            "military_ets": "",
            "appt_date": "2012-08-30 09:15:00",
            "notes": {
              "note": {
                "date": "2012-03-17 19:57:52",
                "agent": "John E",
                "note": "Additional $220\/month income from child support."
              }
            },
            "disposition": "Dealer Needs to Call Back",
            "disposition_id": "215",
            "calls": {
              "call": {
                "date": "2016-03-17 19:49:21",
                "agent": "John E",
                "recording": "https:\/\/92295f6ce5d79dc3fed6-536161980c29f6c9b1682f2b65fa0381.ssl.cf2.rackcdn.com\/RE22fd5c4e8d1589c73388ad1ec18b7b97.mp3",
                "lead_phone": "5031113333",
                "direction": "Inbound",
                "duration": "480",
                "disposition": "Dealer Needs to Call Back",
                "disposition_class": "Interested",
                "disposition_id": "215"
              }
            },
            "sms": {
              "sms_message": {
                "date": "2016-03-17 03:47:57",
                "lead_phone": "5031113333",
                "direction": "Inbound",
                "message": "Thank you"
              }
            },
            "appointment_followup": {
              "followup_date": "2013-09-13 22:44:04",
              "followup": {
                "question": [
                  {
                    "question": "Were you able to make your appointment?",
                    "answer": "Yes"
                  },
                  {
                    "question": "Were you in contact with anyone from the dealership prior to your appointment?",
                    "answer": "No"
                  },
                  {
                    "question": "Did you work with <Person> at the dealership? If not, who did you work with?",
                    "answer": "Charles"
                  },
                  {
                    "question": "When you first arrived at the dealership, were you asked to fill out any additional paperwork?",
                    "answer": "Yes"
                  },
                  {
                    "question": "Did you purchase a vehicle?",
                    "answer": "Yes"
                  },
                  {
                    "question": "On a scale from 1 to 10, 10 being the best, what would you rate your overall experience?",
                    "answer": "9"
                  },
                  {
                    "question": "Comments",
                    "answer": "You all some great guys the only part I might have a problem with is the down payment of 1,200 I miscalculated the dates and I won't have that money in my account until probably closer to the 28th - Directed Randy to give Charles a callback to discuss any financing concerns."
                  }
                ]
              }
            },
            "lead_status": {
              "call_cycle_completed": "1",
              "status": "Appointment"
            },
            "additional_info": {
              "custom1": "Your Custom Data",
              "custom2": "Your Custom Data",
              "custom3": "Your Custom Data"
            }
          }
          ```
        </details>
        
        <details>
          <summary>
            **Sample Success** (Click to expand)
          </summary>
          
          ```
          {
            "success": "yes",
            "message": "Lead Created"
          }
          ```
        </details>
        
        <details>
          <summary>
            **Sample Error** (Click to expand)
          </summary>
          
          ```
          {
            "success": "no",
            "message": "ERROR MESSAGE"
          }
          ```
        </details>
        
      parameters:
        - name: id
          in: path
          description: 'lead_id field'
          required: true
          schema:
            type: string
            example: 123456
        - name: destination
          in: query
          description: 'url field'
          required: true
          schema:
            type: string
        - name: lead_action
          in: query
          description: |
            One of:
            - New Lead
            - Update
          schema:
            type: string
            default: 'New Lead'
        - name: debug
          in: query
          schema:
            type: boolean
            default: false
        - name: debug_response
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: 'Lead created'
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Lead is not found'
  '/campaign/{id}/match':
    post:
      tags:
        - hidden
      operationId: checkMatchCampaignById
      description: 'You are able to check campaign matches by id.'
      parameters:
        - name: id
          in: path
          description: 'campaign_id field'
          required: true
          schema:
            type: string
            example: 123456
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file_type:
                  type: string
                  description: |
                    One of:
                     - sales
                     - services
                  default: 'sales'
                match_type:
                  type: string
                  description: |
                    One of:
                     - loose
                     - medium
                     - strong
                  default: 'loose'
              example: 
                {
                  "file_type": "sales",
                  "match_type": "medium"
                }
        description: 'Match settings'
      responses:
        '200':
          description: 'Campaign match report'
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: object
                    properties:
                      dealer_name:
                        type: string
                        example: 'Mann Co.'
                      campaign_name:
                        type: string
                        example: '30 second approval'
                      campaign_start:
                        type: string
                        format: date
                        example: '2012-09-01'
                      campaign_end:
                        type: string
                        format: date
                        example: '2012-09-14'
                      total_dms_records:
                        type: integer
                        example: 24
                      total_leads_records:
                        type: integer
                        example: 28
                      total_matches:
                        type: integer
                        example: 134
                  match_results:
                    type: array
                    items:
                      type: object
              example:
                {
                  "summary": {
                    "dealer_name": "Mann Co.",
                    "campaign_name": "30 second approval",
                    "campaign_start": "2012-09-01",
                    "campaign_end": "2012-09-14",
                    "total_dms_records": "24",
                    "total_leads_records": "28",
                    "total_matches": "134"
                  },
                  "match_results": []
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Campaign ID is not found'

  '/activations':
    post:
      tags:
        - Activation
      operationId: addActivation
      description: 'You are able to add activation for your campaigns.'
      parameters:
        - name: campaign_id
          in: header
          description: 'Campaign ID or External Campaign ID'
          required: true
          schema:
            type: string
            example: 4
        - name: custom_variable
          in: header
          description: 'Changes activation code label on script if provided'
          schema:
            type: string
            example: 'Pin Code'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                codes:
                  type: array
                  items:
                    $ref: '#/components/schemas/LeadsActivation'
              example: 
                {
                  "codes":
                  [
                    {
                      "activation_code": "1234567",
                      "name_first": "Test",
                      "name_last": "Testington",
                      "address": "123 Fake St",
                      "city": "Portland",
                      "state": "OR",
                      "zip": "97202"
                    },
                    {
                      "activation_code": "7654321",
                      "name_first": "Fake",
                      "name_last": "Fakington",
                      "address": "321 Test Ave",
                      "address2": "Apt 123",
                      "city": "Schenectady",
                      "state": "NY",
                      "zip": "12345",
                      "year": "2010",
                      "make": "Honda",
                      "model": "Civic",
                      "score": "750",
                      "our_offer": "7500",
                      "value_rough": "7331",
                      "value_average": "8148",
                      "value_clean": "8413",
                      "custom1": "Custom Data Here",
                      "custom2": "Custom Data Here",
                      "custom3": "Custom Data Here",
                      "custom4": "Custom Data Here",
                      "custom5": "Custom Data Here"
                    }
                  ]
                }
        description: 'Activation codes to add'
      responses:
        '200':
          description: 'Activation codes have been processed successfully'
          content:
            application/json:
              example: 
                success: 'yes'
                total_added: 20
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Campaign is not found'
    delete:
      tags:
        - Activation
      operationId: deleteActivation
      description: 'You are able to delete activation for your campaigns.'
      parameters:
        - name: campaign_id
          in: header
          description: 'Campaign ID or External Campaign ID'
          required: true
          schema:
            type: string
            example: 4
        - name: delete_all
          in: header
          description: 'Use this to delete all or a list of activation codes'
          schema:
            type: boolean
            default: false
        - name: codes
          in: query
          required: true
          description: 'A list of activation codes'
          schema:
            type: array
            items:
              type: integer
            minItems: 1
          style: form
          explode: false
          example: [7654321]
      responses:
        '200':
          description: 'Activation codes have been deleted successfully'
          content:
            application/json:
              example: 
                success: 'yes'
                total_deleted: 2
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Campaign is not found'

  '/alerts':
    get:
      tags:
        - Alert
      operationId: getAlerts
      description: 'You are able to get list of alerts for your campaigns.'
      parameters:
        - name: campaign_id
          in: header
          description: 'Campaign ID'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          description: 'Returns a list of alerts'
          content:
            application/json:
              example: 
                [
                  {
                    "alert_id": "86804",
                    "category": "CRM Post",
                    "alert_type": "VinSolutions",
                    "destination": "123456",
                    "status_types": {
                      "hot": "1",
                      "warm": "1",
                      "cold": "1",
                      "other": "0"
                    }
                  },
                  {
                    "alert_id": "86803",
                    "category": "Email",
                    "alert_type": "HTML Email",
                    "destination": "test@example.com",
                    "status_types": {
                      "hot": "1",
                      "warm": "1",
                      "cold": "1",
                      "other": "0"
                    }
                  },
                  {
                    "alert_id": "86802",
                    "category": "SMS",
                    "alert_type": "SMS",
                    "destination": "5035555555",
                    "status_types": {
                      "hot": "1",
                      "warm": "0",
                      "cold": "0",
                      "other": "0"
                    }
                  },
                  {
                    "alert_id": "86801",
                    "category": "CRM Email",
                    "alert_type": "adf",
                    "destination": "test2@example.com",
                    "status_types": {
                      "hot": "1",
                      "warm": "0",
                      "cold": "1",
                      "other": "1"
                    }
                  }
                ]
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Campaign is not found'
    post:
      tags:
        - Alert
      operationId: addAlerts
      description: 'You are able to add alerts.'
      parameters:
        - name: campaign_id
          in: header
          description: 'Campaign ID'
          required: true
          schema:
            type: string
            example: 123456
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                campaign:
                  type: object
                  properties:
                    email_settings:
                      type: object
                      properties:
                        from_name:
                          type: string
                          description: 'Campaign'
                          example: 'ABC'
                        from_email_address:
                          type: string
                          description: 'Campaign'
                          format: email
                          example: 'ABC@cloudone.com'
                        email_subject:
                          type: string
                          description: 'Campaign'
                          example: 'subject'
                    alerts:
                      type: array
                      items:
                        $ref: '#/components/schemas/Alert'
                lead:
                  type: object
                  properties:
                    appointment_confirmation:
                      type: boolean
                      description: "\"1\" or \"0\" if you want CloudBDC to email Leads on the Customer's behalf"
                      default: true
                    appointment_reminder:
                      type: boolean
                      description: "\"1\" or \"0\" if you want CloudBDC to email or sms lead reminder on the Customer's behalf"
                      default: true
                    from_email_address:
                      type: string
                      description: 'This is the email that should show up when sending an email. eg. alerts@cloudbdc.com'
                      format: email
                      example: 'abccdf@cloudone.com'
                    from_name:
                      type: string
                      description: 'This is the name that should show up when sending an email. eg. ABC Automotive'
                      example: 'CloudOne'
            example:
              {
                "campaign": {
                  "email_settings": {
                    "from_name": "ABC",
                    "from_email_address": "ABC@cloudone.com",
                    "email_subject": "subject"
                  },
                  "alerts":
                  [
                    {
                      "category": "crm_email",
                      "address": "test2@example.com",
                      "type": "adf",
                      "status_types": {
                        "hot": "1",
                        "warm": "0",
                        "cold": "1",
                        "other": "1"
                      }
                    },
                    {
                      "category": "sms",
                      "name": "fake_name",
                      "number": "5035555555",
                      "status_types": {
                        "hot": "1",
                        "warm": "0",
                        "cold": "0",
                        "other": "0"
                      }
                    },
                    {
                      "category": "email",
                      "address": "test@example.com",
                      "type": "html"
                    },
                    {
                      "category": "crm_post",
                      "crm_dealer_id": "123456",
                      "type": "VinSolutions"
                    }
                  ]
                },
                "lead": {
                  "appointment_confirmation": "1",
                  "appointment_reminder": "1",
                  "from_email_address": "abccdf@cloudone.com",
                  "from_name": "CloudOne"
                }
              }
        description: 'Alert info'
      responses:
        '200':
          description: 'Alerts have been added successfully'
          content:
            application/json:
              example: 
                [
                  {
                    "Error": "0",
                    "Message": "Successfully created alert #86801 for test2@example.com. Alert type = adf and category = Crm Email",
                    "Posted": {
                      "category": "crm_email",
                      "address": "test2@example.com",
                      "type": "adf",
                      "status_types": {
                        "hot": "1",
                        "warm": "0",
                        "cold": "1",
                        "other": "1"
                      }
                    }
                  },
                  {
                    "Error": "0",
                    "Message": "Successfully created alert #86802 for 5035555555. SMS number = 5035555555 and category = Sms",
                    "Posted": {
                      "category": "sms",
                      "name": "fake_name",
                      "number": "5035555555",
                      "status_types": {
                        "hot": "1",
                        "warm": "0",
                        "cold": "0",
                        "other": "0"
                      }
                    }
                  },
                  {
                    "Error": "0",
                    "Message": "Successfully created alert #86803 for test@example.com. Alert type = html and category = Email",
                    "Posted": {
                      "category": "email",
                      "address": "test@example.com",
                      "type": "html"
                    }
                  },
                  {
                    "Error": "0",
                    "Message": "Successfully created alert #86804 for . Alert type =  and category = Crm Post",
                    "Posted": {
                      "category": "crm_post",
                      "crm_dealer_id": "123456",
                      "type": "VinSolutions"
                    }
                  },
                  {
                    "Error": "0",
                    "Message": "Created Lead Alert",
                    "Posted": {
                      "appointment_confirmation": "1",
                      "appointment_reminder": "1",
                      "from_email_address": "abccdf@cloudone.com",
                      "from_name": "CloudOne"
                    }
                  }
                ]
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Campaign is not found'
  '/alerts/{id}':
    delete:
      tags:
        - Alert
      operationId: deleteAlerts
      description: 'You are able to delete alert by id.'
      parameters:
        - name: id
          in: path
          description: 'Alert ID'
          required: true
          schema:
            type: string
            example: 572
        - name: campaign_id
          in: header
          description: 'Campaign ID'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          description: 'Alert has been deleted successfully'
          content:
            application/json:
              example: 
                {
                  "alert_id": "572"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Alert or Campaign is not found'

  '/calls':
    get:
      tags:
        - Call
      operationId: getCalls
      description: 'You are able to get list of calls for your campaigns.'
      parameters:
        - name: phone_number
          in: header
          description: 'Phone (10 Digits Only)'
          required: true
          schema:
            type: integer
            minimum: 1000000000
            maximum: 9999999999
            example: 1234567890
        - name: campaign_id
          in: header
          description: 'Campaign ID'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          description: 'Returns a list of calls'
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Call'
              example: 
                [
                  {
                    "call_id": "CB9dbadb21bdb4f535d44ae03253c3ebc5",
                    "date": "2012-07-05 17:56:42",
                    "from_phone": "9497273200",
                    "to_phone": "9512214327",
                    "direction": "inbound",
                    "duration": "140",
                    "recording": "https://94595f6ce5d79dc3fed6-536161980c29f6c9b1682f2b65fa0381.ssl.cf2.rackcdn.com/AB316c10acdba352350fade824befad268.mp3",
                    "transcription": ""
                  },
                  {
                    "call_id": "CDc33b7c06fc61b0224d405354f2016aa0",
                    "date": "2012-07-06 15:57:26",
                    "from_phone": "3109017215",
                    "to_phone": "9512214327",
                    "direction": "inbound",
                    "duration": "83",
                    "recording": "https://94595f6ce5d79dc3fed6-536161980c29f6c9b1682f2b65fa0381.ssl.cf2.rackcdn.com/CDd521166f04e52f11eae7f2fed874f606.mp3",
                    "transcription": ""
                  }
                ]

        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Campaign is not found'

  '/campaigns':
    get:
      tags:
        - Campaign
      operationId: getCampaigns
      description: 'You are able to get list of your campaigns.'
      parameters:
        - name: dealer_id
          in: header
          description: 'Dealer ID'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          description: 'Returns a list of campaigns'
          content:
            application/json:
              example: 
                [
                  {
                    "campaign_id": "654321",
                    "campaign_name": "API Test Campaign"
                  },
                  {
                    "campaign_id": "654322",
                    "campaign_name": "API Test Campaign 2"
                  }
                ]
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Dealer is not found'
    post:
      tags:
        - Campaign
      operationId: addCampaign
      description: 'You are able to add your campaign.'
      parameters:
        - name: dealer_id
          in: header
          description: 'Dealer ID'
          required: true
          schema:
            type: string
            example: 123456
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Campaign'

              type: object
              properties:
                custom_text:
                  description: 'Custom Text (require event_start_date field)'
                  type: string
                  example: 'Custom Text Data'
                prize_info:
                  description: 'Prize Information (require event_start_date field)'
                  type: string
                  example: 'Prize Data'
                prize_description:
                  description: 'Prize Description (require event_start_date field). Agent will read this text'
                  type: string
                event_start_date:
                  description: 'Event Start Date'
                  type: string
                  format: date
                  example: '2014-10-22'
                event_end_date:
                  description: 'Event End Date (require event_start_date field)'
                  type: string
                  format: date
                  example: '2015-10-22'
                override:
                  type: object
                  properties:
                    location:
                      type: object
                      properties:
                        name:
                          description: 'Alternative location name'
                          type: string
                          maxLength: 100
                          example: 'Override Name'
                        address:
                          description: 'Alternative location'
                          type: string
                          maxLength: 100
                          example: '123 Override Fake St'
                        pronunciation:
                          description: 'pronunciation of the address'
                          type: string
                          maxLength: 100
                          example: 'Override Fake'
                        address2:
                          type: string
                          maxLength: 100
                          example: 'Suite 123'
                        city:
                          type: string
                          maxLength: 50
                          example: 'Vancouver'
                        state:
                          type: string
                          maxLength: 2
                          example: 'WA'
                        zip:
                          type: integer
                          minimum: 10000
                          maximum: 99999
                          example: 98663
                        intersection:
                          type: string
                          maxLength: 255
                          example: 'Between C and A Street'
                        landmarks:
                          type: string
                          maxLength: 255
                          example: 'A BIG sign'
                    ask_for:
                      type: object
                      properties:
                        name:
                          description: 'Name'
                          type: string
                          maxLength: 100
                          example: 'John Doe'
                        phone:
                          description: 'Provide the best contact telephone number for this person'
                          type: integer
                          minimum: 1000000000
                          maximum: 9999999999
                          example: 3603334511
                        gender:
                          description: '"n" = neutral, "m" = male, "f" = female'
                          type: string
                          maxLength: 1
                          example: 'M'
                        pronunciation:
                          description: 'pronunciation of the ask for'
                          type: string
                          maxLength: 100
                          example: 'Override Fake'
                    appointment_hours:
                      type: object
                      properties:
                        monday:
                          type: object
                          properties:
                            opened:
                              type: boolean
                              description: '0 for no, 1 for yes'
                            first_appointment:
                              type: string
                              description: 'Time'
                              example: '09:00'
                            last_appointment:
                              type: string
                              description: 'Time'
                              example: '21:00'
                        tuesday:
                          type: object
                          properties:
                            opened:
                              type: boolean
                              description: '0 for no, 1 for yes'
                            first_appointment:
                              type: string
                              description: 'Time'
                              example: '09:00'
                            last_appointment:
                              type: string
                              description: 'Time'
                              example: '21:00'
                        wednesday:
                          type: object
                          properties:
                            opened:
                              type: boolean
                              description: '0 for no, 1 for yes'
                            first_appointment:
                              type: string
                              description: 'Time'
                              example: '09:00'
                            last_appointment:
                              type: string
                              description: 'Time'
                              example: '21:00'
                        thursday:
                          type: object
                          properties:
                            opened:
                              type: boolean
                              description: '0 for no, 1 for yes'
                            first_appointment:
                              type: string
                              description: 'Time'
                              example: '09:00'
                            last_appointment:
                              type: string
                              description: 'Time'
                              example: '21:00'
                        friday:
                          type: object
                          properties:
                            opened:
                              type: boolean
                              description: '0 for no, 1 for yes'
                            first_appointment:
                              type: string
                              description: 'Time'
                              example: '09:00'
                            last_appointment:
                              type: string
                              description: 'Time'
                              example: '21:00'
                        saturday:
                          type: object
                          properties:
                            opened:
                              type: boolean
                              description: '0 for no, 1 for yes'
                            first_appointment:
                              type: string
                              description: 'Time'
                              example: '09:00'
                            last_appointment:
                              type: string
                              description: 'Time'
                              example: '18:00'
                        sunday:
                          type: object
                          properties:
                            opened:
                              type: boolean
                              description: '0 for no, 1 for yes'
                additional_info:
                  type: object
                  properties:
                    field_name:
                      description: 'Custom Field Name'
                      type: string
                      maxLength: 255
                      example: 'custom field data'

            example: 
              {
                "campaign_name": "API Test Campaign",
                "external_campaign_id": "ABC123",
                "call_center_script": "501",
                "answer_as": "Approval Center",
                "outbound_as": "Test Dealer",
                "start_date": "2014-10-22",
                "end_date": "2015-10-22",
                "override": {
                  "location": {
                    "name": "Override Name",
                    "address": "123 Override Fake St",
                    "pronunciation": "Override Fake",
                    "address2": "Suite 123",
                    "city": "Vancouver",
                    "state": "WA",
                    "zip": "98663",
                    "intersection": "Between C and A Street",
                    "landmarks": "A BIG sign"
                  },
                  "ask_for": {
                    "name": "John Doe",
                    "pronunciation": "Override Fake",
                    "phone": "3603334511",
                    "gender": "M"
                  }
                },
                "direct_mail_quantity": "10000",
                "mailer_image_url": "https://mailer_image_url.com/image_name.jpg",
                "event_start_date": "2014-10-22",
                "event_end_date": "2015-10-22",
                "custom_text": "Custom Text Data",
                "prize_info": "Prize Data",
                "additional_info": {
                  "custom_field": "custom field data",
                  "custom_field1": "custom field data"
                },
                "dealer_transportation": "1",
                "notes": "This is a campaign"
              }
        description: 'Campaign info'
      responses:
        '200':
          description: 'Campaign has been added successfully'
          content:
            application/json:
              example: 
                {
                  "campaign_id": "654321"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Dealer is not found'
  '/campaigns/{id}':
    get:
      tags:
        - Campaign
      operationId: getCampaignById
      description: 'You are able to get your campaign info by id.'
      parameters:
        - name: id
          in: path
          description: 'Campaign ID'
          required: true
          schema:
            type: string
            example: 987654
        - name: dealer_id
          in: header
          description: 'Dealer ID'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          description: 'Returns campaign info'
          content:
            application/json:
              example: 
                {
                  "campaign_id": "654321",
                  "external_campaign_id": "ABC123",
                  "campaign_name": "API Test Campaign",
                  "call_center_script": "501",
                  "answer_as": "Approval Center",
                  "outbound_as": "Test Dealer",
                  "start_date": "2015-10-22",
                  "end_date": "2016-10-22",
                  "override": {
                    "location": {
                      "name": "Override Name",
                      "address": "123 Override Fake St",
                      "pronunciation": "Override Fake",
                      "address2": "Suite 123",
                      "city": "Vancouver",
                      "state": "WA",
                      "zip": "98663",
                      "intersection": "Between C and A Street",
                      "landmarks": "A BIG sign"
                    },
                    "ask_for": {
                      "name": "John Doe",
                      "pronunciation": "Override Fake",
                      "phone": "3603334511",
                      "gender": "M"
                    }
                  },
                  "direct_mail_quantity": "10000",
                  "mailer_image_url": "https://mailer_image_url.com/image_name.jpg",
                  "event_start_date": "2015-10-22",
                  "event_end_date": "2016-10-22",
                  "custom_text": "Custom Text Data",
                  "prize_info": "Prize Data",
                  "additional_info": {
                    "custom_field": "custom field data",
                    "custom_field1": "custom field data"
                  },
                  "dealer_transportation": "1",
                  "notes": "This is a campaign"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Campaign or Dealer is not found'
    put:
      tags:
        - Campaign
      operationId: updateCampaignById
      description: 'You are able to update your campaign by id.'
      parameters:
        - name: id
          in: path
          description: 'Campaign ID'
          required: true
          schema:
            type: string
            example: 987654
        - name: dealer_id
          in: header
          description: 'Dealer ID'
          required: true
          schema:
            type: string
            example: 123456
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Campaign'
              type: object
              properties:
                custom_text:
                  description: 'Custom Text (require event_start_date field)'
                  type: string
                  example: 'Custom Text Data'
                prize_info:
                  description: 'Prize Information (require event_start_date field)'
                  type: string
                  example: 'Prize Data'
                prize_description:
                  description: 'Prize Description (require event_start_date field). Agent will read this text'
                  type: string
                event_start_date:
                  description: 'Event Start Date'
                  type: string
                  format: date
                  example: '2014-10-22'
                event_end_date:
                  description: 'Event End Date (require event_start_date field)'
                  type: string
                  format: date
                  example: '2015-10-22'
                override:
                  type: object
                  properties:
                    location:
                      type: object
                      properties:
                        name:
                          description: 'Alternative location name'
                          type: string
                          maxLength: 100
                          example: 'Override Name'
                        address:
                          description: 'Alternative location'
                          type: string
                          maxLength: 100
                          example: '123 Override Fake St'
                        pronunciation:
                          description: 'pronunciation of the address'
                          type: string
                          maxLength: 100
                          example: 'Override Fake'
                        address2:
                          type: string
                          maxLength: 100
                          example: 'Suite 123'
                        city:
                          type: string
                          maxLength: 50
                          example: 'Vancouver'
                        state:
                          type: string
                          maxLength: 2
                          example: 'WA'
                        zip:
                          type: integer
                          minimum: 10000
                          maximum: 99999
                          example: 98663
                        intersection:
                          type: string
                          maxLength: 255
                          example: 'Between C and A Street'
                        landmarks:
                          type: string
                          maxLength: 255
                          example: 'A BIG sign'
                    ask_for:
                      type: object
                      properties:
                        name:
                          description: 'Name'
                          type: string
                          maxLength: 100
                          example: 'John Doe'
                        phone:
                          description: 'Provide the best contact telephone number for this person'
                          type: integer
                          minimum: 1000000000
                          maximum: 9999999999
                          example: 3603334511
                        gender:
                          description: '"n" = neutral, "m" = male, "f" = female'
                          type: string
                          maxLength: 1
                          example: 'M'
                        pronunciation:
                          description: 'pronunciation of the ask for'
                          type: string
                          maxLength: 100
                          example: 'Override Fake'
                    appointment_hours:
                      type: object
                      properties:
                        monday:
                          type: object
                          properties:
                            opened:
                              type: boolean
                              description: '0 for no, 1 for yes'
                            first_appointment:
                              type: string
                              description: 'Time'
                              example: '09:00'
                            last_appointment:
                              type: string
                              description: 'Time'
                              example: '21:00'
                        tuesday:
                          type: object
                          properties:
                            opened:
                              type: boolean
                              description: '0 for no, 1 for yes'
                            first_appointment:
                              type: string
                              description: 'Time'
                              example: '09:00'
                            last_appointment:
                              type: string
                              description: 'Time'
                              example: '21:00'
                        wednesday:
                          type: object
                          properties:
                            opened:
                              type: boolean
                              description: '0 for no, 1 for yes'
                            first_appointment:
                              type: string
                              description: 'Time'
                              example: '09:00'
                            last_appointment:
                              type: string
                              description: 'Time'
                              example: '21:00'
                        thursday:
                          type: object
                          properties:
                            opened:
                              type: boolean
                              description: '0 for no, 1 for yes'
                            first_appointment:
                              type: string
                              description: 'Time'
                              example: '09:00'
                            last_appointment:
                              type: string
                              description: 'Time'
                              example: '21:00'
                        friday:
                          type: object
                          properties:
                            opened:
                              type: boolean
                              description: '0 for no, 1 for yes'
                            first_appointment:
                              type: string
                              description: 'Time'
                              example: '09:00'
                            last_appointment:
                              type: string
                              description: 'Time'
                              example: '21:00'
                        saturday:
                          type: object
                          properties:
                            opened:
                              type: boolean
                              description: '0 for no, 1 for yes'
                            first_appointment:
                              type: string
                              description: 'Time'
                              example: '09:00'
                            last_appointment:
                              type: string
                              description: 'Time'
                              example: '18:00'
                        sunday:
                          type: object
                          properties:
                            opened:
                              type: boolean
                              description: '0 for no, 1 for yes'
                additional_info:
                  type: object
                  properties:
                    field_name:
                      description: 'Custom Field Name'
                      type: string
                      maxLength: 255
                      example: 'custom field data'

            example: 
              {
                "campaign_name": "API Test Campaign",
                "external_campaign_id": "ABC123",
                "call_center_script": "501",
                "answer_as": "Approval Center",
                "outbound_as": "Test Dealer",
                "start_date": "2014-10-22",
                "end_date": "2015-10-22",
                "override": {
                  "location": {
                    "name": "Override Name",
                    "address": "123 Override Fake St",
                    "pronunciation": "Override Fake",
                    "address2": "Suite 123",
                    "city": "Vancouver",
                    "state": "WA",
                    "zip": "98663",
                    "intersection": "Between C and A Street",
                    "landmarks": "A BIG sign"
                  },
                  "ask_for": {
                    "name": "John Doe",
                    "pronunciation": "Override Fake",
                    "phone": "3603334511",
                    "gender": "M"
                  }
                },
                "direct_mail_quantity": "10000",
                "mailer_image_url": "https://mailer_image_url.com/image_name.jpg",
                "event_start_date": "2014-10-22",
                "event_end_date": "2015-10-22",
                "custom_text": "Custom Text Data",
                "prize_info": "Prize Data",
                "additional_info": {
                  "custom_field": "custom field data",
                  "custom_field1": "custom field data"
                },
                "dealer_transportation": "1",
                "notes": "This is a campaign"
              }
        description: 'Campaign info'
      responses:
        '200':
          description: 'Campaign has been updated successfully'
          content:
            application/json:
              example: 
                {
                  "campaign_id": "654321",
                  "external_campaign_id": "ABC123",
                  "campaign_name": "API Test Campaign",
                  "call_center_script": "501",
                  "answer_as": "Approval Center",
                  "outbound_as": "Test Dealer",
                  "start_date": "2015-10-22",
                  "end_date": "2016-10-22",
                  "override": {
                    "location": {
                      "name": "Override Name",
                      "address": "123 Override Fake St",
                      "pronunciation": "Override Fake",
                      "address2": "Suite 123",
                      "city": "Vancouver",
                      "state": "WA",
                      "zip": "98663",
                      "intersection": "Between C and A Street",
                      "landmarks": "A BIG sign"
                    },
                    "ask_for": {
                      "name": "John Doe",
                      "pronunciation": "Override Fake",
                      "phone": "3603334511",
                      "gender": "M"
                    }
                  },
                  "direct_mail_quantity": "10000",
                  "mailer_image_url": "https://mailer_image_url.com/image_name.jpg",
                  "event_start_date": "2015-10-22",
                  "event_end_date": "2016-10-22",
                  "custom_text": "Custom Text Data",
                  "prize_info": "Prize Data",
                  "additional_info": {
                    "custom_field": "custom field data",
                    "custom_field1": "custom field data"
                  },
                  "dealer_transportation": "1",
                  "notes": "This is a campaign"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Campaign or Dealer is not found'

  '/dealers':
    get:
      tags:
        - Dealer
      operationId: getDealers
      description: 'You are able to get list of all your dealers.'
      responses:
        '200':
          description: 'Returns a list of dealers'
          content:
            application/json:
              example: 
                [
                  {
                    "dealer_id": "1234567",
                    "name": "Test Dealer 1"
                  },
                  {
                    "dealer_id": "2345678",
                    "name": "Test Dealer 2"
                  }
                ]

        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - Dealer
      operationId: addDealer
      description: 'You are able to add dealers under your client id.'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Dealer'
              type: object
              properties:
                dealer_hours:
                  type: object
                  properties:
                    monday:
                      type: object
                      properties:
                        opened:
                          type: boolean
                          description: '0 for no, 1 for yes'
                        open:
                          type: string
                          description: 'Time'
                          example: '09:00'
                        close:
                          type: string
                          description: 'Time'
                          example: '21:00'
                    tuesday:
                      type: object
                      properties:
                        opened:
                          type: boolean
                          description: '0 for no, 1 for yes'
                        open:
                          type: string
                          description: 'Time'
                          example: '09:00'
                        close:
                          type: string
                          description: 'Time'
                          example: '21:00'
                    wednesday:
                      type: object
                      properties:
                        opened:
                          type: boolean
                          description: '0 for no, 1 for yes'
                        open:
                          type: string
                          description: 'Time'
                          example: '09:00'
                        close:
                          type: string
                          description: 'Time'
                          example: '21:00'
                    thursday:
                      type: object
                      properties:
                        opened:
                          type: boolean
                          description: '0 for no, 1 for yes'
                        open:
                          type: string
                          description: 'Time'
                          example: '09:00'
                        close:
                          type: string
                          description: 'Time'
                          example: '21:00'
                    friday:
                      type: object
                      properties:
                        opened:
                          type: boolean
                          description: '0 for no, 1 for yes'
                        open:
                          type: string
                          description: 'Time'
                          example: '09:00'
                        close:
                          type: string
                          description: 'Time'
                          example: '21:00'
                    saturday:
                      type: object
                      properties:
                        opened:
                          type: boolean
                          description: '0 for no, 1 for yes'
                        open:
                          type: string
                          description: 'Time'
                          example: '09:00'
                        close:
                          type: string
                          description: 'Time'
                          example: '18:00'
                    sunday:
                      type: object
                      properties:
                        opened:
                          type: boolean
                          description: '0 for no, 1 for yes'
                        open:
                          type: string
                          description: 'Time'
                          example: '09:00'
                        close:
                          type: string
                          description: 'Time'
                          example: '18:00'

            example: 
              {
                "dealer_info": {
                  "name": "Test Dealer",
                  "dba": "Test DBA",
                  "address": "123 Fake St",
                  "address2": "Suite 321",
                  "city": "Vancouver",
                  "state": "WA",
                  "zip": "98663",
                  "phone": "1234567890",
                  "fax": "9876543210",
                  "external_dealer_id": "C12345",
                  "time_zone": "US/Pacific",
                  "website": "http://www.example.com"
                },
                "dealer_hours": {
                  "monday": {
                    "opened": "1",
                    "open": "09:00",
                    "close": "21:00"
                  },
                  "tuesday": {
                    "opened": "1",
                    "open": "09:00",
                    "close": "21:00"
                  },
                  "wednesday": {
                    "opened": "1",
                    "open": "09:00",
                    "close": "21:00"
                  },
                  "thursday": {
                    "opened": "1",
                    "open": "09:00",
                    "close": "21:00"
                  },
                  "friday": {
                    "opened": "1",
                    "open": "09:00",
                    "close": "21:00"
                  },
                  "saturday": {
                    "opened": "1",
                    "open": "10:00",
                    "close": "18:00"
                  },
                  "sunday": {
                    "opened": "0"
                  }
                },
                "billing_info": {
                  "name_first": "Fake",
                  "name_last": "Fakington",
                  "address": "123 Fake St",
                  "address2": "Suite 321",
                  "city": "Vancouver",
                  "state": "WA",
                  "zip": "98663",
                  "email": "billing@example.com",
                  "phone": "3456789012",
                  "phone_ext": "123",
                  "fax": "4567890123"
                }
              }
        description: 'Dealer info'
      responses:
        '200':
          description: 'Dealer has been added successfully'
          content:
            application/json:
              example: 
                {
                  "dealer_id": "123456"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  '/dealers/{id}':
    get:
      tags:
        - Dealer
      operationId: getDealerById
      description: 'Get information about a specific dealer.'
      parameters:
        - name: id
          in: path
          description: 'Dealer ID'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          description: 'Returns dealer info'
          content:
            application/json:
              example: 
                {
                  "dealer_info": {
                    "dealer_id": "123456",
                    "name": "Test Dealer",
                    "dba": "Test DBA",
                    "address": "123 Fake St",
                    "address2": "Suite 321",
                    "city": "Vancouver",
                    "state": "WA",
                    "zip": "98663",
                    "phone": "1234567890",
                    "fax": "9876543210",
                    "external_dealer_id": "C12345",
                    "time_zone": "US/Pacific",
                    "website": "http://www.example.com",
                    "pronunciation": "test"
                  },
                  "dealer_hours": {
                    "monday": {
                      "opened": "1",
                      "open": "09:00",
                      "close": "21:00"
                    },
                    "tuesday": {
                      "opened": "1",
                      "open": "09:00",
                      "close": "21:00"
                    },
                    "wednesday": {
                      "opened": "1",
                      "open": "09:00",
                      "close": "21:00"
                    },
                    "thursday": {
                      "opened": "1",
                      "open": "09:00",
                      "close": "21:00"
                    },
                    "friday": {
                      "opened": "1",
                      "open": "09:00",
                      "close": "21:00"
                    },
                    "saturday": {
                      "opened": "1",
                      "open": "10:00",
                      "close": "18:00"
                    },
                    "sunday": {
                      "opened": "0"
                    }
                  },
                  "billing_info": {
                    "name_first": "Fake",
                    "name_last": "Fakington",
                    "address": "123 Fake St",
                    "address2": "Suite 321",
                    "city": "Vancouver",
                    "state": "WA",
                    "zip": "98663",
                    "email": "billing@example.com",
                    "phone": "3456789012",
                    "phone_ext": "123",
                    "fax": "4567890123"
                  }
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Dealer is not found'
    put:
      tags:
        - Dealer
      operationId: updateDealerById
      description: 'You are able to update dealers under your client id.'
      parameters:
        - name: id
          in: path
          description: 'Dealer ID'
          required: true
          schema:
            type: string
            example: 123456
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Dealer'
              type: object
              properties:
                dealer_hours:
                  type: object
                  properties:
                    monday:
                      type: object
                      properties:
                        opened:
                          type: boolean
                          description: '0 for no, 1 for yes'
                        open:
                          type: string
                          description: 'Time'
                          example: '09:00'
                        close:
                          type: string
                          description: 'Time'
                          example: '21:00'
                    tuesday:
                      type: object
                      properties:
                        opened:
                          type: boolean
                          description: '0 for no, 1 for yes'
                        open:
                          type: string
                          description: 'Time'
                          example: '09:00'
                        close:
                          type: string
                          description: 'Time'
                          example: '21:00'
                    wednesday:
                      type: object
                      properties:
                        opened:
                          type: boolean
                          description: '0 for no, 1 for yes'
                        open:
                          type: string
                          description: 'Time'
                          example: '09:00'
                        close:
                          type: string
                          description: 'Time'
                          example: '21:00'
                    thursday:
                      type: object
                      properties:
                        opened:
                          type: boolean
                          description: '0 for no, 1 for yes'
                        open:
                          type: string
                          description: 'Time'
                          example: '09:00'
                        close:
                          type: string
                          description: 'Time'
                          example: '21:00'
                    friday:
                      type: object
                      properties:
                        opened:
                          type: boolean
                          description: '0 for no, 1 for yes'
                        open:
                          type: string
                          description: 'Time'
                          example: '09:00'
                        close:
                          type: string
                          description: 'Time'
                          example: '21:00'
                    saturday:
                      type: object
                      properties:
                        opened:
                          type: boolean
                          description: '0 for no, 1 for yes'
                        open:
                          type: string
                          description: 'Time'
                          example: '09:00'
                        close:
                          type: string
                          description: 'Time'
                          example: '18:00'
                    sunday:
                      type: object
                      properties:
                        opened:
                          type: boolean
                          description: '0 for no, 1 for yes'
                        open:
                          type: string
                          description: 'Time'
                          example: '09:00'
                        close:
                          type: string
                          description: 'Time'
                          example: '18:00'

            example: 
              {
                "dealer_info": {
                  "name": "Test Dealer",
                  "dba": "Test DBA",
                  "address": "123 Fake St",
                  "address2": "Suite 321",
                  "city": "Vancouver",
                  "state": "WA",
                  "zip": "98663",
                  "phone": "1234567890",
                  "fax": "9876543210",
                  "external_dealer_id": "C12345",
                  "time_zone": "US/Pacific",
                  "website": "http://www.example.com"
                },
                "dealer_hours": {
                  "monday": {
                    "opened": "1",
                    "open": "09:00",
                    "close": "21:00"
                  },
                  "tuesday": {
                    "opened": "1",
                    "open": "09:00",
                    "close": "21:00"
                  },
                  "wednesday": {
                    "opened": "1",
                    "open": "09:00",
                    "close": "21:00"
                  },
                  "thursday": {
                    "opened": "1",
                    "open": "09:00",
                    "close": "21:00"
                  },
                  "friday": {
                    "opened": "1",
                    "open": "09:00",
                    "close": "21:00"
                  },
                  "saturday": {
                    "opened": "1",
                    "open": "10:00",
                    "close": "18:00"
                  },
                  "sunday": {
                    "opened": "0"
                  }
                },
                "billing_info": {
                  "name_first": "Fake",
                  "name_last": "Fakington",
                  "address": "123 Fake St",
                  "address2": "Suite 321",
                  "city": "Vancouver",
                  "state": "WA",
                  "zip": "98663",
                  "email": "billing@example.com",
                  "phone": "3456789012",
                  "phone_ext": "123",
                  "fax": "4567890123"
                }
              }
        description: 'Dealer info'
      responses:
        '200':
          description: 'Dealer has been updated successfully'
          content:
            application/json:
              example: 
                {
                  "dealer_info": {
                    "dealer_id": "123456",
                    "name": "Test Dealer",
                    "dba": "Test DBA",
                    "address": "123 Fake St",
                    "address2": "Suite 321",
                    "city": "Vancouver",
                    "state": "WA",
                    "zip": "98663",
                    "phone": "1234567890",
                    "fax": "9876543210",
                    "external_dealer_id": "C12345",
                    "time_zone": "US/Pacific",
                    "website": "http://www.example.com"
                  },
                  "dealer_hours": {
                    "monday": {
                      "opened": "1",
                      "open": "09:00",
                      "close": "21:00"
                    },
                    "tuesday": {
                      "opened": "1",
                      "open": "09:00",
                      "close": "21:00"
                    },
                    "wednesday": {
                      "opened": "1",
                      "open": "09:00",
                      "close": "21:00"
                    },
                    "thursday": {
                      "opened": "1",
                      "open": "09:00",
                      "close": "21:00"
                    },
                    "friday": {
                      "opened": "1",
                      "open": "09:00",
                      "close": "21:00"
                    },
                    "saturday": {
                      "opened": "1",
                      "open": "10:00",
                      "close": "18:00"
                    },
                    "sunday": {
                      "opened": "0"
                    }
                  },
                  "billing_info": {
                    "name_first": "Fake",
                    "name_last": "Fakington",
                    "address": "123 Fake St",
                    "address2": "Suite 321",
                    "city": "Vancouver",
                    "state": "WA",
                    "zip": "98663",
                    "email": "billing@example.com",
                    "phone": "3456789012",
                    "phone_ext": "123",
                    "fax": "4567890123"
                  }
                }

        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Dealer is not found'

  '/leads':
    get:
      tags:
        - Lead
      operationId: getLeads
      description: 'You are able to get list of leads for your campaign.'
      parameters:
        - name: campaign_id
          in: header
          description: 'Campaign ID'
          required: true
          schema:
            type: integer
            example: 654321
      responses:
        '200':
          description: 'Returns a list of leads'
          content:
            application/json:
              example: 
                [
                  {
                    "lead_id": "1234567",
                    "creation_date": "2012-08-17 16:57:37"
                  },
                  {
                    "lead_id": "2345678",
                    "creation_date": "2012-08-17 22:28:24"
                  }
                ]
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Сampaign is not found'
    post:
      tags:
        - Lead
      operationId: addLeads
      description: 'You are able to add leads. Currently you can only add 100 leads per instance.'
      parameters:
        - name: campaign_id
          in: header
          description: 'Campaign ID'
          required: true
          schema:
            type: integer
            example: 123456
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/Lead'
                properties:
                  years_at_address:
                    type: integer
                    example: 5
                  months_at_address:
                    type: integer
                    example: 2
                  years_at_prev_address:
                    type: integer
                    example: 3
                  months_at_prev_address:
                    type: integer
                    example: 11
                  years_at_prev_employer:
                    type: integer
                    example: 5
                  months_at_prev_employer:
                    type: integer
                    example: 2
                  military_months_of_service:
                    type: integer
                    example: 0
                  residence_status:
                    type: string
                    description: |
                      One of:
                      - Own
                      - Rent
                      - Family
                      - Military
                    example: 'Rent'
                  persons_on_agreement:
                    type: integer
                    example: 2
                  housing_payment:
                    type: number
                    example: 850
                  notes:
                    type: string
                    example: 'Notes go here'
                  reservation_code:
                    description: 'This is for ping/post providers'
                    type: string
                    maxLength: 20
                    example: 'ace post'
                  schedule_work:
                    description: 'Schedule Work (0 = no, 1 = yes) for call center agent to call, defaults to 1 if left blank'
                    type: boolean
                    default: 1
                  jobs:
                    type: array
                    items:
                      type: object
                      properties:
                        employer:
                          type: string
                          maxLength: 100
                          example: 'My Company'
                        occupation:
                          type: string
                          maxLength: 100
                          example: 'My Occupation'
                        years_at_employer:
                          type: integer
                          example: 5
                        months_at_employer:
                          type: integer
                          example: 2
                        pay_method:
                          type: string
                          description: |
                            One of:
                            - Direct
                            - Check
                            - Cash
                            - Both
                          example: 'Direct'
                        paycheck_type:
                          type: string
                          description: |
                            One of:
                            - Computerized
                            - Hand Written
                            - Typed
                          example: 'Computerized'
                        taxes_withheld:
                          description: '0 for no, 1 for yes'
                          type: boolean
                          example: 1
                        employment_status:
                          type: string
                          description: |
                            One of:
                            - Permanent
                            - Temp
                            - Seasonal
                          example: 'Permanent'
                        monthly_income:
                          type: number
                          example: 3000
                  vehicles:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          description: |
                            One of:
                            - interested
                            - own
                          type: string
                          maxLength: 50
                          example: 'interested'
                        year:
                          type: integer
                          minimum: 1000
                          maximum: 9999
                          example: 2016
                        make:
                          type: string
                          maxLength: 50
                          example: 'Toyota'
                        model:
                          type: string
                          maxLength: 50
                          example: 'Corolla'
                        trim:
                          type: string
                          maxLength: 50
                          example: 'S Plus'
                        vin:
                          type: string
                          maxLength: 50
                          example: '2T1BURHE6GC555164'
                        mileage:
                          type: number
                          example: 0
                        exterior_color:
                          type: string
                          maxLength: 50
                          example: 'Black Sand Pearl'
                        interior_color:
                          type: string
                          maxLength: 50
                          example: 'Silver'
                        condition:
                          description: |
                            One of:
                            - Clean
                            - Excellent
                            - Good
                            - Average
                            - Fair
                            - Rough
                          type: string
                          maxLength: 50
                          example: 'Excellent'
                        monthly_payment:
                          description: 'Money format e.g. 475.95'
                          type: number
                          example: 0
                        amount_owed:
                          description: 'Money format e.g. 25000.00'
                          type: number
                          example: 0
                        retail:
                          description: 'Money format e.g. 30000.00'
                          type: number
                          example: 30000
                        wholesale:
                          description: 'Money format e.g. 27000.00'
                          type: number
                          example: 20000
                        book:
                          description: 'Money format e.g. 25000.00'
                          type: number
                          example: 15000
                        chrome_style_id:
                          description: 'Chrome Style ID'
                          type: integer
                          example: 376988
                        payoff_date:
                          type: string
                          format: date
                          example: '2019-01-22'
                  additional_info:
                    type: object
                    properties:
                      field_name:
                        description: 'Custom Field Name'
                        type: string
                        maxLength: 255
                        example: 'custom field data'
            example: 
              [
                {
                  "external_id": "1234567",
                  "language": "en",
                  "name_first": "John",
                  "name_middle": "T",
                  "name_last": "Smith",
                  "ssn": "111223333",
                  "credit_permission": "1",
                  "birth_month": "7",
                  "birth_day": "11",
                  "birth_year": "1978",
                  "coapp_relation": "Wife",
                  "coapp_income": "3000",
                  "phone_home": "1112223333",
                  "phone_work": "2223334444",
                  "phone_cell": "3334445555",
                  "preferred_phone": "Home",
                  "confirmation_pref": "Text",
                  "email_address": "test@example.com",
                  "street_address": "123 Fake St",
                  "city": "Portland",
                  "state": "OR",
                  "zip_code": "99999",
                  "years_at_address": "5",
                  "months_at_address": "2",
                  "residence_status": "Rent",
                  "persons_on_agreement": "2",
                  "housing_payment": "850",
                  "rent_total": "850",
                  "prev_street_address": "321 Fake St",
                  "prev_city": "Portland",
                  "prev_state": "OR",
                  "prev_zip_code": "90000",
                  "years_at_prev_address": "3",
                  "months_at_prev_address": "11",
                  "jobs": [
                    {
                      "employer": "My Company",
                      "occupation": "My Occupation",
                      "years_at_employer": "5",
                      "months_at_employer": "2",
                      "pay_method": "Direct",
                      "paycheck_type": "Computerized",
                      "taxes_withheld": "1",
                      "employment_status": "Permanent",
                      "monthly_income": "3000"
                    }
                  ],
                  "vehicles": [
                    {
                      "type": "interested",
                      "year": "2016",
                      "make": "Toyota",
                      "model": "Corolla",
                      "vin": "2T1BURHE6GC555164",
                      "trim": "S Plus",
                      "chrome_style_id": "376988",
                      "mileage": "0",
                      "exterior_color": "Black Sand Pearl",
                      "interior_color": "Silver",
                      "condition": "Excellent",
                      "monthly_payment": "0",
                      "amount_owed": "0",
                      "retail": "30000",
                      "wholesale": "20000",
                      "book": "15000"
                    },
                    {
                      "type": "interested",
                      "year": "2016",
                      "make": "Toyota",
                      "model": "Sienna",
                      "vin": "",
                      "trim": "XLE",
                      "chrome_style_id": "380706",
                      "mileage": "0",
                      "exterior_color": "Red",
                      "interior_color": "Blue",
                      "condition": "New"
                    }
                  ],
                  "other_monthly_income": "1000",
                  "years_at_prev_employer": "5",
                  "months_at_prev_employer": "2",
                  "prev_employer": "Previous Company",
                  "employment_gap": "3",
                  "trade_year": "1999",
                  "trade_make": "Pontiac",
                  "trade_model": "Grand Am",
                  "trade_mileage": "95000",
                  "trade_monthly_payment": "300",
                  "trade_color": "Silver",
                  "trade_retail": "3000",
                  "trade_wholesale": "2000",
                  "trade_book": "Blue Book",
                  "military": "0",
                  "military_months_of_service": "0",
                  "military_pay_grade": "",
                  "military_ets": "",
                  "appt_date": "2012-08-30 09:15:00",
                  "notes": "Notes go here",
                  "ip_address": "127.0.0.1"
                },
                {
                  "external_id": "1234567",
                  "name_first": "John",
                  "name_last": "Doe",
                  "credit_permission": "1",
                  "birth_month": "7",
                  "birth_day": "11",
                  "birth_year": "1978",
                  "coapp_relation": "Wife",
                  "coapp_income": "3000",
                  "phone_home": "1112223333",
                  "phone_work": "2223334444",
                  "phone_cell": "3334445555",
                  "preferred_phone": "Home",
                  "confirmation_pref": "Text",
                  "email_address": "test@example.com",
                  "street_address": "123 Fake St",
                  "city": "Portland",
                  "state": "OR",
                  "zip_code": "99999",
                  "years_at_address": "5",
                  "months_at_address": "2",
                  "residence_status": "Rent",
                  "persons_on_agreement": "2",
                  "housing_payment": "850",
                  "rent_total": "850",
                  "prev_street_address": "321 Fake St",
                  "prev_city": "Portland",
                  "prev_state": "OR",
                  "prev_zip_code": "90000",
                  "years_at_prev_address": "3",
                  "months_at_prev_address": "11",
                  "jobs": [
                    {
                      "employer": "My Company",
                      "occupation": "My Occupation",
                      "years_at_employer": "5",
                      "months_at_employer": "2",
                      "pay_method": "Direct",
                      "paycheck_type": "Computerized",
                      "taxes_withheld": "1",
                      "employment_status": "Permanent",
                      "monthly_income": "3000"
                    }
                  ],
                  "vehicles": [
                    {
                      "type": "interested",
                      "year": "2016",
                      "make": "Toyota",
                      "model": "Corolla",
                      "vin": "2T1BURHE6GC555164",
                      "trim": "S Plus",
                      "chrome_style_id": "376988",
                      "mileage": "0",
                      "exterior_color": "Black Sand Pearl",
                      "interior_color": "Silver",
                      "condition": "Excellent",
                      "monthly_payment": "0",
                      "amount_owed": "0",
                      "retail": "30000",
                      "wholesale": "20000",
                      "book": "15000"
                    },
                    {
                      "type": "interested",
                      "year": "2016",
                      "make": "Toyota",
                      "model": "Sienna",
                      "vin": "",
                      "trim": "XLE",
                      "chrome_style_id": "380706",
                      "mileage": "0",
                      "exterior_color": "Red",
                      "interior_color": "Blue",
                      "condition": "New"
                    }
                  ],
                  "other_monthly_income": "1000",
                  "years_at_prev_employer": "5",
                  "months_at_prev_employer": "2",
                  "prev_employer": "Previous Company",
                  "employment_gap": "3",
                  "military": "0",
                  "military_months_of_service": "0",
                  "military_pay_grade": "",
                  "military_ets": "",
                  "appt_date": "2012-08-30 09:15:00",
                  "notes": "Notes go here",
                  "ip_address": "127.0.0.1",
                  "additional_info": {
                    "custom1": "Your Custom Data",
                    "custom2": "Your Custom Data",
                    "custom3": "Your Custom Data"
                  }
                }
              ]
      responses:
        '200':
          description: 'Leads has been added successfully'
          content:
            application/json:
              example: 
                [
                  {
                    "lead_id": "123456",
                    "external_id": "1234567"
                  },
                  {
                    "lead_id": "123457",
                    "external_id": "2345678"
                  }
                ]
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Campaign is not found'
  '/leads/{id}':
    get:
      tags:
        - Lead
      operationId: getLeadById
      description: 'You are able to get lead info by id.'
      parameters:
        - name: id
          in: path
          description: 'lead_id field or external_lead_id'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          # TODO: Check latest updates for disposition_id values
          # Genareted with https://tableconvert.com/
          description: |
            Returns lead info.

            <details>
              <summary>
                **disposition_id** values table(Click to expand)
              </summary>

              DISPOSITION ID (disposition_id) | TITLE | DESCRIPTION
              ---|---|---
              0 | In Queue |
              1 | Appointment Set | This is an auto disposition whenever a call ends with an appointment successfully set.  If this disposition is used, notification will be sent to customer and dealership of appt date/time.
              2 | Appointment Reschedule | This is an auto disposition whenever an appointment is rescheduled.  If this disposition is used, notification will be sent to caller and dealership of appt reschedule date/time.
              3 | Appointment With No Date | Auto Disposition from Not Ready Button:  This disposition is used for the customer who states they will go into the dealership but are unwilling to commit to a specific date or time.  If this disposition is used, application will be sent to dealership as is and customer will be sent dealership's information.
              10 | Appointment Confirmed | This disposition is used if a customer calls in after an appt is set and needs any add'l information about their appt.  For example: they are on the way to the dealership and need the address/directions/phone number/contact name.  Using this disposition will keep the lead in "Appointment Set" status without resending alerts.
              15 | Appointment Showed | This disposition is used if a customer showed for appointment if the dealer marked it as a no show. Using this disposition will keep the lead in "Appointment Set" status without resending alerts.
              100 | Check with Spouse | Auto Disposition from Not Ready Button:  To be used if someone needs to check with their significant other or check their schedule before setting appt.  Any time this disposition is used it requires a follow up scheduled.  If this disposition is used, the application will stay in our system until follow up call is made.
              101 | Check Schedule | This is an auto disposition from the NOT READY button, but is also available from the main disposition drop down.  Any time this disposition is used it requires a follow up scheduled
              103 | Scheduled Call Back | This is to be used for the customer who doesn't have time to talk and needs us to call them back at a later date or time.  Any time this disposition is used it requires a follow up scheduled.  If this disposition is used, the application will stay in our system until follow up call is made.
              106 | Dealership In Contact | This disposition is to be used if the customer states they are all ready working with our dealership.  Customer's name and phone number should still be obtained/verified.  If this disposition is used, application will be sent to dealership as is.
              107 | Application Complete | This disposition is used if we have completed the application process with the customer and are submitting their completed application to the BAMA underwriting dept for approval.  Using this disposition will send the lead to BAMA underwriting for approval.
              108 | Approval Notification Complete | This disposition is used if we have completed the approval notification process and collected the credit card information to process the application fee.  Using this disposition will send the lead to BAMA underwriting for payment processing.
              109 | Credit Approved - Waiting on Vehicle Inventory | This is an auto disposition whenever a customer is approved for program, but there are not any vehicles currently available in their driving market.
              132 | Interested Without Appointment | Interested Without Appointment
              203 | Serviced Elsewhere | The customer has their vehicle serviced somewhere else other than the dealership.
              206 | Customer Needs Transportation | Auto Disposition from Not Ready Button:  This is to be used for the customer who says they do not have a way to the dealership.  If this disposition is used, application will be sent to dealership as is and customer will be sent dealership's information.
              211 | Customer Distance From Dealership is a Factor | Auto Disposition from Not Ready Button:  This is to be used for the customer who states that the dealership is too far away from them.  If this disposition is used, application will be sent to dealership as is and customer will be sent dealership's information.
              213 | Other | Auto Disposition from Not Ready Button:   This disposition is to be used when a customer says I want to speak with the dealer/dealership before committing to an appt for any reason other than the above listed options.  If you use this disposition, there should be a note stating the customer's reason for wanting to talk with dealership first.  If this disposition is used, application will be sent to dealership as is and customer will be sent dealership's information.
              214 | Approval before I come in | Auto Disposition from Not Ready Button:   This is to be used for the customer who wants an approval or specific numbers such as interest rate/down payment amt/etc  before going into the dealership.   If this disposition is used, application will be sent to dealership as is and customer will be sent dealership's information.
              218 | Had a bad experience with Dealer | Auto Disposition from Not Ready Button:   This is to be used when the customer states they or someone they know has been to this dealership previously and it did not go well for whatever reason. Make any applicable notes to customer's concerns.  If this disposition is used, application will be sent to dealership as is and customer will be sent dealership's information.
              219 | Specific Vehicle | Auto Disposition from Not Ready Button:   This is to be used when a customer questions inventory because they are looking for something specific.  Note what vehicle or type of vehicle they are looking for in the NOTES section.  If this disposition is used, application will be sent to dealership as is and customer will be sent dealership's information.
              222 | Customer Interested in Gift Card or Prize Only | This disposition should be used if the caller is only interested in the prize, drawing or gift card offered on the direct mail invitation and is unwilling to set an appointment in order to claim their prize at the dealership.  If this disposition is used, application will be sent to dealership as is.
              223 | In the Market at a Future Date | This disposition should be used if the customer says they are not looking to buy until a future date (further than 30 days out).  Note should give a time frame, if given.  If this disposition is used, application will be sent to dealership as is.
              229 | Under Age of 21 |
              230 | Checking Status of Application | This disposition is used if we have completed the application process with the customer and they are calling back in because they have not heard if they are approved or denied from underwriting yet.  Using this disposition will notify us that customer is still waiting to hear on their approval status.
              250 | Uber ID Not Found | This disposition is used if we searched by email and or phone number and were not able to find the uber id.
              251 | Out of State License | This disposition is to be used if the driver has a current driver's license that is different than the state they are currently living/driving in, excluding exceptions in market crossover.
              252 | Need Landlord/Mortgage Info | This disposition should be used when the customer does not have the contact information to verify with the landlord/mortgage holder.  The customer will need to call us back with that information to complete the application for submission.
              253 | Need Employer Phone Number | This disposition should be used when the customer does not have their employer's phone number.  The customer will need to call us back with that information to complete the application for submission.
              254 | Address Doesn't Match Driver's License | This disposition is used if the lead is in PA or GA and the address on their driver's license doesn't match their home address
              255 | Event Ended | Caller called in to make an appointment after event has ended.
              256 | Needs to Check Schedule | Customer will call back to make an appointment.
              260 | Outside Financing |
              304 | Inquiry - No Info Gathered | This disposition should be used if a customer calls in but only has questions they want answered and are unwilling to give us the basic information we need in order to send application to dealership.  If we are unable to collect mailer code/zip code, name and phone number before call ends, we cannot send to dealer and should therefore  use this disposition.  Using this disposition will mark this as a cold lead that will result in no further calls being made and the dealer not receiving this lead.
              314 | No longer interested |
              350 | Opt Out | This disposition should be used if the customer specifically says "Take me off your list" or "Opt me out".    (If it is a mailer campaign, we still need to collect mailer number to verify name on mailer.  Please make sure to inform caller of the Opt out number on the bottom of the mailer in order to opt out of receiving any additional mailers.  Using this disposition will mark this as a cold lead that will result in no further calls being made and the dealer not receiving this lead.
              360 | Credit Denied | This disposition is an auto disposition that is used when the driver's application has been processed by underwriting has been denied.
              400 | No Answer | OUTBOUND DISPOSITION:  This disposition is used when a dialed number just rings or rings and drops without any voice mail message or option to leave a message for customer.  Using this disposition will cause an auto follow up call to be scheduled based on the current status of the outbound call cycle.
              401 | Left Voicemail | OUTBOUND DISPOSITION:  This disposition is used when a message is left on a voice mail or answering machine for a customer.   Using this disposition will cause an auto follow up call to be scheduled based on the current status of the outbound call cycle.
              404 | Left Message With Someone Else | OUTBOUND DISPOSITION:  This disposition is used when we leave a message with a live person who has stated customer is not available to come to phone.  If this disposition is used, it will require a scheduled call back time be set.   If this disposition is used, the call cycle will be placed on hold until scheduled follow up call is made.
              405 | Temporarily Disconnected Number | OUTBOUND DISPOSITION:  This disposition should be used if the number you have called has temporarily been disconnected or is not in service. Using this disposition will automatically schedule a call back for 48 hours. If the phone is still disconnected at the time of that call, the call should then be dispositioned as Disconnected Number.
              406 | Voicemail Box Not Set Up Yet Or Full | OUTBOUND DISPOSITION:  This disposition is used if when calling the customer a voice mail cannot be left because their voice mail box has not been set up yet.   Using this disposition will cause an auto follow up call to be scheduled based on the current status of the outbound call cycle.
              407 | Customer Accidentally Dialed Us | This disposition is to be used for an active lead where the customer says "Sorry - I called the wrong number!" or pocket calls us.   (An active lead is a lead where there is a customer name in the lead.)  Using this disposition will keep the lead in its current outbound call cycle status and disposition.
              408 | No Message Left | OUTBOUND DISPOSITION:  This disposition is used on the 2nd/3rd/4th call of the day after a message has all ready been left.  We only leave one message per phone number listed per day.  After that, all calls made get disconnected if and when voice mail comes on.   Using this disposition will cause an auto follow up call to be scheduled based on the current status of the outbound call cycle.
              410 | Gift Card Redemption | This disposition is used when a lead calls in to redeem their gift card because the dealer did not do it.
              471 | No Dealer | This is an auto disposition that occurs if we do not currently have a dealer in the caller's local area.   Using this disposition will mark this as a cold lead that will result in no further calls being made and the dealer not receiving this lead.
              474 | Inbound Dropped Call | This disposition is used if an inbound call drops at any point during the call for any reason.  Even if you are 100% certain the customer hung up, always assume the call dropped.  When using this disposition, note the acct of current status of application/call and that call dropped.  Please never put "Customer Hung Up".  Using this disposition will cause this lead to be moved to the top of our Outgoing Work queue so that an outbound call can be placed to the customer to attempt to complete app/set appt.
              475 | Need Spanish Speaking Agent | This disposition is to be used for a customer who needs a Spanish speaking agent.  Using this disposition will flag this lead as a Spanish lead and move it to Outgoing work for Spanish queue to follow up.
              476 | Queued Call Hang Up | This disposition should be used if you answer an inbound queued call and all you hear is our hold music.
              500 | Followup Complete | This disposition is to be used when the appt follow up has been completed.  We have spoken with the customer, collected information about their experience and no additional follow up needs to happen.
              501 | Scheduled Call Back | This disposition is to be used when a customer requests a call back at a later date or time to complete the appointment follow up call.  Using this disposition will require a scheduled call back.
              503 | Still in Progress With Dealer | This disposition is to be used when a customer is still actively working with the dealer to finalize their deal.  This is a deal in progress and we will want to follow up with this customer at a later date to learn the final outcome if their interaction with dealership.  Using this disposition will require a scheduled call back be set.
              504 | In Market At Future Date | This disposition is to be used for a person who does not want to reschedule as they have decided to purchase a car at a future date. If possible, note time frame of expected purchase.
              601 | Wrong Number | This is for an inbound blank lead where caller was trying to reach someone other than our company.    Using this disposition will mark this as a cold lead that will result in no further calls being made and the dealer not receiving this lead.
              602 | Not a Valid Number for Customer | OUTBOUND DISPOSITION:  This disposition is to be used when we call a number listed for a customer and the number is a working number, but customer listed on application is not reachable at it.  Using this disposition will mark this as an Invalid lead that will result in no further calls being made, credit requested for the lead and the dealer not receiving application.
              603 | Disconnected Number | OUTBOUND DISPOSITION:  This disposition is to be used if a number listed for a customer is not a working number.  Using this disposition will mark this as an Invalid lead that will result in no further calls being made, credit requested for the lead and the dealer not receiving application.
              604 | Number Does not Accept Incoming Calls | OUTBOUND DISPOSITION:  This disposition is to be used when we call a number listed for a customer and get the automated message "At the subscriber's request, this number does not accept incoming calls.".  Using this disposition will mark this as an Invalid lead that will result in no further calls being made, credit requested for the lead and the dealer not receiving application.
              606 | Did Not Fill Out Any Online Application | PRIMARILY USED ON OUTBOUND CALLS.   This disposition is used for the customer who states they are not in the market for a vehicle and they did not fill out any form of online application.    Using this disposition will mark this as an Invalid lead that will result in no further calls being made, credit requested for the lead and the dealer not receiving application.
              607 | Blocked Number | PRIMARILY USED ON OUTBOUND CALLS.   This disposition is used for the customer whose phone number is blocked
              608 | Personal Loan | This disposition is to be used for the customer who thinks they are applying for anything other than a car loan such as a personal loan or payday loan.  It is also used for the customer who filled out an online application, but thought it was for something other than a car loan.  For example:  to win a free car or an Ipad.   In addition,  for mailer campaigns, if caller thinks mailer received is a  credit card offer.   Using this disposition will mark this as a cold lead that will result in no further calls being made and the dealer not receiving this lead.
              609 | Credit Card Inquiry | This disposition is to be used for the customer who thinks they are applying for anything other than a car loan such as a personal loan or payday loan.  It is also used for the customer who filled out an online application, but thought it was for something other than a car loan.  For example:  to win a free car or an Ipad.   In addition,  for mailer campaigns, if caller thinks mailer received is a  credit card offer.   Using this disposition will mark this as a cold lead that will result in no further calls being made and the dealer not receiving this lead.
              611 | Just Bought a Car | PRIMARILY USED ON OUTBOUND CALLS.  This disposition should be used for the customer who states they did submit an application online, but they have since bought a car.  We should attempt to find out when they bought the car (specifics), if possible.   Using this disposition will mark this as a cold lead that will result in no further calls being made and the dealer not receiving this lead.
              612 | Not Enough Income | This disposition should be used for the customer who does not make the minimum income as specified by the dealer.
              614 | Not in the Market for an Auto Loan | This disposition should be used if customer did submit an application online for auto financing, but they have since reconsidered or changed their mind and are no longer interested in getting pre-qualified for a vehicle.  This should be used at the beginning of a call for an application that we were unable to verify.  PRIMARILY USED ON OUTBOUND CALLS.   Using this disposition will mark this as a cold lead that will result in no further calls being made and the dealer not receiving this lead.
              615 | No Job |
              616 | Under Age of 18 |
              750 | Support Request | This is for a dealership that calls in looking for support or wants to find out more about Credit Yes.  This should also be used if someone calls in wanting administrative support such as verification of employment or Accounts Payable/Receivable.
              999 | Test Lead | This disposition is to be used for a test call.  When new campaigns are being set up, a test call is placed to verify the phone number is correct.   Using this disposition will mark this as a cold lead that will result in no further calls being made and the dealer not receiving this lead.
            </details>
          content:
            application/json:
              schema:
                  type: object
                  allOf:
                    - $ref: '#/components/schemas/Lead'
                  properties:
                    years_at_address:
                      type: integer
                      example: 5
                    months_at_address:
                      type: integer
                      example: 2
                    years_at_prev_address:
                      type: integer
                      example: 3
                    months_at_prev_address:
                      type: integer
                      example: 11
                    years_at_prev_employer:
                      type: integer
                      example: 5
                    months_at_prev_employer:
                      type: integer
                      example: 2
                    military_months_of_service:
                      type: integer
                      example: 0
                    residence_status:
                      type: string
                      description: |
                        One of:
                        - Own
                        - Rent
                        - Family
                        - Military
                      example: 'Rent'
                    persons_on_agreement:
                      type: integer
                      example: 2
                    housing_payment:
                      type: number
                      example: 850
                    notes:
                      type: string
                      example: 'Notes go here'
                    reservation_code:
                      description: 'This is for ping/post providers'
                      type: string
                      maxLength: 20
                      example: 'ace post'
                    schedule_work:
                      description: 'Schedule Work (0 = no, 1 = yes) for call center agent to call, defaults to 1 if left blank'
                      type: boolean
                      default: 1
                    jobs:
                      type: array
                      items:
                        type: object
                        properties:
                          employer:
                            type: string
                            maxLength: 100
                            example: 'My Company'
                          occupation:
                            type: string
                            maxLength: 100
                            example: 'My Occupation'
                          years_at_employer:
                            type: integer
                            example: 5
                          months_at_employer:
                            type: integer
                            example: 2
                          pay_method:
                            type: string
                            description: |
                              One of:
                              - Direct
                              - Check
                              - Cash
                              - Both
                            example: 'Direct'
                          paycheck_type:
                            type: string
                            description: |
                              One of:
                              - Computerized
                              - Hand Written
                              - Typed
                            example: 'Computerized'
                          taxes_withheld:
                            description: '0 for no, 1 for yes'
                            type: boolean
                            example: 1
                          employment_status:
                            type: string
                            description: |
                              One of:
                              - Permanent
                              - Temp
                              - Seasonal
                            example: 'Permanent'
                          monthly_income:
                            type: number
                            example: 3000
                    vehicles:
                      type: array
                      items:
                        type: object
                        properties:
                          type:
                            description: |
                              One of:
                              - interested
                              - own
                            type: string
                            maxLength: 50
                            example: 'interested'
                          year:
                            type: integer
                            minimum: 1000
                            maximum: 9999
                            example: 2016
                          make:
                            type: string
                            maxLength: 50
                            example: 'Toyota'
                          model:
                            type: string
                            maxLength: 50
                            example: 'Corolla'
                          trim:
                            type: string
                            maxLength: 50
                            example: 'S Plus'
                          vin:
                            type: string
                            maxLength: 50
                            example: '2T1BURHE6GC555164'
                          mileage:
                            type: number
                            example: 0
                          exterior_color:
                            type: string
                            maxLength: 50
                            example: 'Black Sand Pearl'
                          interior_color:
                            type: string
                            maxLength: 50
                            example: 'Silver'
                          condition:
                            description: |
                              One of:
                              - Clean
                              - Excellent
                              - Good
                              - Average
                              - Fair
                              - Rough
                            type: string
                            maxLength: 50
                            example: 'Excellent'
                          monthly_payment:
                            description: 'Money format e.g. 475.95'
                            type: number
                            example: 0
                          amount_owed:
                            description: 'Money format e.g. 25000.00'
                            type: number
                            example: 0
                          retail:
                            description: 'Money format e.g. 30000.00'
                            type: number
                            example: 30000
                          wholesale:
                            description: 'Money format e.g. 27000.00'
                            type: number
                            example: 20000
                          book:
                            description: 'Money format e.g. 25000.00'
                            type: number
                            example: 15000
                          chrome_style_id:
                            description: 'Chrome Style ID'
                            type: integer
                            example: 376988
                          payoff_date:
                            type: string
                            format: date
                            example: '2019-01-22'
                    additional_info:
                      type: object
                      properties:
                        field_name:
                          description: 'Custom Field Name'
                          type: string
                          maxLength: 255
                          example: 'custom field data'
              example: 
                {
                  "campaign_id": "8",
                  "external_id": "1234567",
                  "time_zone": "US/Pacific",
                  "language": "en",
                  "source": "CreditYes",
                  "name_first": "John",
                  "name_middle": "T",
                  "name_last": "Smith",
                  "ssn": "111223333",
                  "credit_permission": "1",
                  "birth_month": "7",
                  "birth_day": "11",
                  "birth_year": "1978",
                  "coapp_relation": "Wife",
                  "coapp_income": "3000",
                  "phone_home": "1112223333",
                  "phone_work": "2223334444",
                  "phone_cell": "3334445555",
                  "preferred_phone": "Home",
                  "confirmation_pref": "Text",
                  "email_address": "test@example.com",
                  "street_address": "123 Fake St",
                  "city": "Portland",
                  "state": "OR",
                  "zip_code": "99999",
                  "years_at_address": "5",
                  "months_at_address": "2",
                  "residence_status": "Rent",
                  "persons_on_agreement": "2",
                  "housing_payment": "850",
                  "rent_total": "850",
                  "prev_street_address": "321 Fake St",
                  "prev_city": "Portland",
                  "prev_state": "OR",
                  "prev_zip_code": "90000",
                  "years_at_prev_address": "3",
                  "months_at_prev_address": "11",
                  "jobs": [
                    {
                      "employer": "My Company",
                      "occupation": "My Occupation",
                      "years_at_employer": "5",
                      "months_at_employer": "2",
                      "pay_method": "Direct",
                      "paycheck_type": "Computerized",
                      "taxes_withheld": "1",
                      "employment_status": "Permanent",
                      "monthly_income": "3000"
                    }
                  ],
                  "vehicles": [
                      {
                        "type": "tradein",
                        "year": "2016",
                        "make": "Toyota",
                        "model": "Corolla",
                        "vin": "2T1BURHE6GC555164",
                        "trim": "S Plus",
                        "mileage": "0",
                        "exterior_color": "Black Sand Pearl",
                        "interior_color": "Silver",
                        "condition": "Excellent",
                        "monthly_payment": "0",
                        "amount_owed": "0",
                        "retail": "30000",
                        "wholesale": "20000",
                        "book": "15000"
                      },
                      {
                        "type": "interested",
                        "year": "2016",
                        "make": "Toyota",
                        "model": "Sienna",
                        "vin": "",
                        "trim": "XLE",
                        "mileage": "0",
                        "exterior_color": "Red",
                        "interior_color": "Blue",
                        "condition": "New"
                      }
                  ],
                  "other_monthly_income": "1000",
                  "years_at_prev_employer": "5",
                  "months_at_prev_employer": "2",
                  "prev_employer": "Previous Company",
                  "employment_gap": "3",
                  "trade_year": "1999",
                  "trade_make": "Pontiac",
                  "trade_model": "Grand Am",
                  "trade_mileage": "95000",
                  "trade_monthly_payment": "300",
                  "trade_color": "Silver",
                  "trade_retail": "3000",
                  "trade_wholesale": "2000",
                  "trade_book": "Blue Book",
                  "military": "0",
                  "military_months_of_service": "0",
                  "military_pay_grade": "",
                  "military_ets": "",
                  "appt_date": "2012-08-30 09:15:00",
                  "notes": [
                    {
                      "date": "2012-03-17 19:57:52",
                      "agent": "John E",
                      "note": "Additional $220/month income from child support."
                    }
                  ],
                  "disposition": "Dealer Needs to Call Back",
                  "disposition_id": "215",
                  "calls": [
                    {
                      "date": "2016-03-17 19:49:21",
                      "agent": "John E",
                      "recording": "https://92295f6ce5d79dc3fed6-536161980c29f6c9b1682f2b65fa0381.ssl.cf2.rackcdn.com/RE22fd5c4e8d1589c73388ad1ec18b7b97.mp3",
                      "lead_phone": "5031113333",
                      "direction": "Inbound",
                      "duration": "480",
                      "disposition": "Dealer Needs to Call Back",
                      "disposition_class": "Interested",
                      "disposition_id": "215"
                    }
                  ],
                  "sms": {
                    "sms_message": {
                      "date": "2016-03-17 03:47:57",
                      "lead_phone": "5031113333",
                      "direction": "Inbound",
                      "message": "Thank you"
                    }
                  },
                  "lead_status": {
                    "call_cycle_completed": "1"
                  },
                  "additional_info": {
                    "custom1": "Your Custom Data",
                    "custom2": "Your Custom Data",
                    "custom3": "Your Custom Data"
                  }
                }
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Lead is not found'
    put:
      tags:
        - Lead
      operationId: updateLeadById
      description: 'Currently we only allow update of the additional_info section of the lead. We will only update the additional info fields that are passed and if new fields are found they will be added to the lead.'
      parameters:
        - name: id
          in: path
          description: 'lead_id field'
          required: true
          schema:
            type: string
            example: 123456
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - additional_info
              properties:
                additional_info:
                  type: object
                  properties:
                    field_name:
                      description: 'Custom Field Name'
                      type: string
                      maxLength: 255
                      example: 'custom field data'
            example:
              {
                "additional_info": {
                  "custom1": "Update Data",
                  "custom2": "New Data",
                  "custom3": "New Data"
                }
              }
        description: 'Lead additional info'
      responses:
        '200':
          description: 'Lead additional info has been updated successfully'
          content:
            application/json:
              example: 
                {
                  "lead_id": "123456",
                  "additional_info": {
                    "custom1": "Update Data",
                    "custom2": "New Data",
                    "custom3": "New Data"
                  }
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Lead is not found'
  '/leads/{id}/stop_work':
    put:
      tags:
        - Lead
      operationId: stopLeadsWorkById
      description: 'You are able to stop outgoing work for lead.'
      parameters:
        - name: id
          in: path
          description: 'lead_id field or external_lead_id'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          description: 'Lead outgoing work has been stoped successfully'
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Lead is not found'
  '/leads/{id}/appointment_no_show':
    put:
      tags:
        - Lead
      operationId: rescheduleLeadAppointmentById
      description: 'You are able to reschedule lead appointment.'
      parameters:
        - name: id
          in: path
          description: 'lead_id field'
          required: true
          schema:
            type: string
            example: 123456
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                call_date:
                  description: 'Specific time must be in the lead timezone, defaults to current date and time if left blank'
                  type: string
                  format: date-time
                  example: '0000-00-00 00:00:00'
            example:
              {
                "call_date": "0000-00-00 00:00:00"
              }
      responses:
        '200':
           description: 'Call Center Work Scheduled'
        '400':
           description: "One of: \n - Call time cannot be before current time \n - Lead does not have an appointment date \n - Lead appointment time has not passed yet \n - Lead appointment was too long ago \n - Over appointment no show limit"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
           description: 'Lead is not found'

  '/phones':
    get:
      tags:
        - Phone
      operationId: getPhones
      description: 'You are able to get list of phones for your campaign.'
      parameters:
        - name: campaign_id
          in: header
          description: 'Campaign ID'
          required: true
          schema:
            type: integer
            example: 654321
      responses:
        '200':
          description: 'Returns a list of phones'
          content:
            application/json:
              example: 
                [
                  {
                    "phone_number": "5551111111",
                    "label": "Test Number"
                  },
                  {
                    "phone_number": "5552222222",
                    "label": "Test Number 2"
                  }
                ]
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Сampaign is not found'
    post:
      tags:
        - Phone
      operationId: addPhone
      description: 'You are able to add phone.'
      parameters:
        - name: campaign_id
          in: header
          description: 'Campaign ID'
          required: true
          schema:
            type: integer
            example: 654321
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phone'
            example: 
              {
                "area_code": 346,
                "zip_code": 12345,
                "label": "Test Number",
                "redirect_number": 5551234567,
                "whisper": true,
                "phone_type": 2
              }
      responses:
        '200':
          description: 'Phone has been added successfully'
          content:
            application/json:
              example: 
                {
                  "phone_number": "5551234567"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Campaign is not found'
  '/phones/{phone_number}':
    get:
      tags:
        - Phone
      operationId: getPhoneInfo
      description: 'You are able to get info about phone.'
      parameters:
        - name: phone_number
          in: path
          required: true
          description: 'Phone number'
          schema:
            type: integer
            minimum: 1000000000
            maximum: 9999999999
            example: 5551111111
      responses:
        '200':
          description: 'Returns info about phone.'
          content:
            application/json:
              example: 
                {
                  "phone_number": "5551111111",
                  "label": "Test Number",
                  "campaign_id": "654321",
                  "whisper": "Y",
                  "phone_type": "2",
                  "redirect_number": "5551234567"
                }
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Phone number is not found'
    put:
      tags:
        - Phone
      operationId: updatePhone
      description: 'You are able to update phone.'
      parameters:
        - name: phone_number
          in: path
          required: true
          description: 'Phone Number of the campaign'
          schema:
            type: integer
            minimum: 1000000000
            maximum: 9999999999
            example: 5551111111
        - name: campaign_id
          in: header
          description: 'Campaign ID'
          required: true
          schema:
            type: integer
            example: 654321
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Phone'
            example: 
              { 
                "phone_number": "5551111111",
                "label": "Test Number",
                "whisper": true,
                "phone_type": 1,
                "redirect_number": ""
              }
      responses:
        '200':
          description: 'Returns updated phone number.'
          content:
            application/json:
              example: 
                {
                  "phone_number": "5551111111",
                  "label": "Test Number",
                  "whisper": true,
                  "phone_type": 1,
                  "redirect_number": ""
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Phone number or Campaign ID is not found'
    delete:
      tags:
        - Phone
      operationId: deletePhone
      description: 'You are able to delete phone.'
      parameters:
        - name: phone_number
          in: path
          required: true
          description: 'Phone number'
          schema:
            type: integer
            minimum: 1000000000
            maximum: 9999999999
            example: 5551111111
      responses:
        '200':
          description: 'Returns deleted phone number.'
          content:
            application/json:
              example: 
                {
                  "phone_number": "5551111111"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Phone number is not found'

  '/users':
    get:
      tags:
        - User
      operationId: getUsers
      description: 'You are able to get list of users for your dealers.'
      parameters:
        - name: dealer_id
          in: header
          description: 'Dealer ID'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          description: 'Returns a list of users'
          content:
            application/json:
              example: 
                [
                  {
                    "user_id": "654321",
                    "name": "Fake Fakington"
                  },
                  {
                    "user_id": "654322",
                    "name": "Test Testington"
                  }
                ]
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - User
      operationId: addUser
      description: 'You are able to add user.'
      parameters:
        - name: dealer_id
          in: header
          description: 'Dealer ID'
          required: true
          schema:
            type: string
            example: 654321
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example: 
              {
                "name_first": "Test",
                "name_last": "Testington",
                "user_name": "test",
                "password": "123##",
                "phone_cell": "1234567890",
                "phone_work": "9876543210",
                "phone_work_ext": "123",
                "email": "test@example.com"
              }
        description: 'User info'
      responses:
        '200':
          description: 'User has been added successfully'
          content:
            application/json:
              example: 
                {
                  "user_id": "54321"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Dealer is not found'
  '/users/{id}':
    get:
      tags:
        - User
      operationId: getUserById
      description: 'You are able to get user info by id.'
      parameters:
        - name: id
          in: path
          description: 'The user ID'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          description: 'Returns user info'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: 
                {
                  "user_id": "654321",
                  "name_first": "Test",
                  "name_last": "Testington",
                  "user_name": "test",
                  "phone_cell": "1234567890",
                  "phone_work": "9876543210",
                  "phone_work_ext": "123"
                }
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'User is not found'
    put:
      tags:
        - User
      operationId: updateUserById
      description: 'You are able to update user by id.'
      parameters:
        - name: id
          in: path
          description: 'The user ID'
          required: true
          schema:
            type: string
            example: 123456
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              {
                "name_first": "Test",
                "name_last": "Testington",
                "user_name": "test",
                "password": "123##",
                "phone_cell": "9876543210",
                "phone_work": "8765432109",
                "phone_work_ext": "9876543210",
                "email": "test@example.com"
              }
        description: 'User info'
      responses:
        '200':
          description: 'User has been updated successfully'
          content:
            application/json:
              example: 
                {
                  "user_id": "54321",
                  "name_first": "Test",
                  "name_last": "Testington",
                  "user_name": "test",
                  "password": "123##",
                  "phone_cell": "9876543210",
                  "phone_work": "8765432109",
                  "phone_work_ext": "9876543210",
                  "email": "test@example.com"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'User is not found'
    delete:
      tags:
        - User
      operationId: deleteUser
      description: 'You are able to delete user by id.'
      parameters:
        - name: id
          in: path
          description: 'The user ID'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          description: 'User has been deleted successfully'
          content:
            application/json:
              example: 
                {
                  "user_id": "54321"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'User is not found'

components:
  securitySchemes:
    client_id:
      type: apiKey
      in: header
      name: client_id
      description: 'Your Client ID is a 6 digit number located in XXXXXXX.'
    api_key:
      type: apiKey
      in: header
      name: api_key
      description: 'Your API Key can be found in the API section of your account dashboard.'

  responses:
    UnauthorizedError:
      description: 'Invalid client_id or api_key'
      headers:
        client_id:
          $ref: "#/components/securitySchemes/client_id"
        api_key:
          $ref: "#/components/securitySchemes/api_key"
    BadRequestError:
      description: 'Invalid input, bad request'

  schemas:
    Agent:
      type: object
      required:
        - name_first
        - name_last
        - username
        - password
        - agent_type
        - email
      properties:
        name_first:
          type: string
          maxLength: 50
          example: 'Emanuele'
        name_last:
          type: string
          maxLength: 50
          example: 'Spooner'
        username:
          type: string
          maxLength: 50
          example: 'bryan_agent'
        password:
          type: string
          format: password
          maxLength: 100
          example: '123##'
        agent_type:
          type: string
          maxLength: 20
          example: 'digital'
        email:
          type: string
          format: email
          maxLength: 256
          example: 'test@example.com'
        phone_home:
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 9876543210
        phone_cell:
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 1234567890
        phone_office:
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 0123456789
        active:
          type: boolean
          example: 1
        lead_id:
          type: integer
          example: 0
        time_zone:
          type: string
          maxLength: 20
          example: 'US/Pacific'
        skill_level:
          type: integer
          example: 3
        tier:
          type: integer
          example: 3
        carnow_agent_id:
          type: integer
          example: 0
        training:
          type: boolean
          example: 0
        outside_login:
          type: boolean
          example: 1
        text_access:
          type: boolean
          example: 1
        email_access:
          type: boolean
          example: 0
        over_night:
          type: boolean
          example: 0
        lead_search:
          type: boolean
          example: 0
        part_time:
          type: boolean
          example: 0
        max_digital_tasks:
          type: integer
          example: 10
        payrate:
          type: number
          format: float
          example: 10.75
        start_date:
          type: string
          format: date-time
          example: '2016-06-10 07:00:00'
        payroll_id:
          type: integer
          example: 0
        address:
          type: string
          maxLength: 100
          example: '2105 C St.4'
        address2:
          type: string
          maxLength: 200
        city:
          type: string
          maxLength: 50
          example: 'Vancouver'
        state:
          type: string
          maxLength: 2
          example: 'WA'
        zip:
          type: integer
          minimum: 10000
          maximum: 99999
          example: 98663
  
    Alert:
      type: object
      required:
        - category
      properties:
        category:
          description: '"email", "sms", "crm_email", or "crm_post"'
          type: string
          maxLength: 100
          example: 'crm_email'
        status_types:
          type: object
          properties:
            hot:
              type: boolean
              description: 'Flag to turn off or on.'
              default: true
            warm:
              type: boolean
              description: 'Flag to turn off or on.'
              default: true
            cold:
              type: boolean
              description: 'Flag to turn off or on.'
              default: true
            other:
              type: boolean
              description: 'Flag to turn off or on.'
              default: false
        address:
          description: 'Required if category "email" or "crm_email"'
          type: string
          format: email
          maxLength: 100
          example: 'test2@example.com'
        type:
          description: |
            \"text\" or \"html\" and required if category \"email\".

            \"ADF\" and required if category \"crm_email\" or \"crm_post\".
          type: string
          maxLength: 30
          example: 'adf'
        name:
          description: 'Required if category "sms"'
          type: string
          maxLength: 50
          example: 'fake_name'
        number:
          description: 'Required if category "sms"'
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 5035555555
        crm_dealer_id:
          description: 'Required if category "crm_post"'
          type: string
          maxLength: 100
          example: '123456'

    Call:
      type: object
      required:
        - call_id
        - daterange
        - from_phone
        - to_phone
        - direction
        - duration
        - recording
      properties:
        call_id:
          type: string
          maxLength: 34
          example: 'CB9dbadb21bdb4f535d44ae03253c3ebc5'
        daterange:
          type: string
          maxLength: 50
          example: '2012-07-05 17:56:42'
        from_phone:
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 9497273200
        to_phone:
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 9512214327
        direction:
          type: boolean
          description: '0 = Inbound, 1 = Outbound'
        duration:
          type: integer
          example: 140
        recording:
          type: string
          maxLength: 34
          example: 'https://94595f6ce5d79dc3fed6-536161980c29f6c9b1682f2b65fa0381.ssl.cf2.rackcdn.com/AB316c10acdba352350fade824befad268.mp3'

    Campaign:
      type: object
      required:
        - campaign_name
      properties:
        campaign_name:
          description: 'Campaign Name'
          type: string
          maxLength: 255
          example: 'API Test Campaign'
        external_campaign_id:
          description: 'External Campaign ID'
          type: string
          maxLength: 50
          example: 'ABC123'
        campaign_type:
          description: '"Normal", "DirectMail", "Call Forwarding", "Conquest", defaults to Normal if left blank'
          type: string
          maxLength: 25
        script_id:
          description: |
            Call Scripts:
             * `502` - Short Credit App
             * `504` - Payment Swap
             * `505` - Event
             * `506` - Vehicle Buy Back
             * `507` - Bankruptcy Short Script
             * `512` - Long Credit App
             * `515` - Prize
             * `517` - Prize with Trade
             * `518` - Vehicle Recall
             * `520` - Vehicle Buy Back - VM
             * `522` - Event VM
             * `523` - Lease Renew
             * `528` - Short Credit App - Not Direct Mail
             * `529` - Vehicle Buy Back
             * `542` - Short Credit - Television
          type: integer
          enum: [ 502, 504, 505, 506, 507, 512, 515, 517, 518, 520, 522, 523, 528, 529, 542 ]
        answer_as:
          description: 'Answer As'
          type: string
          maxLength: 255
          example: 'Approval Center'
        outbound_as:
          description: 'Outbound As'
          type: string
          maxLength: 255
          example: 'Test Dealer'
        start_date:
          description: 'Start Date'
          type: string
          format: date
          example: '2014-10-22'
        end_date:
          description: 'End Date'
          type: string
          format: date
          example: '2015-10-22'
        notes:
          description: 'Campaign Notes'
          type: string
          maxLength: 255
          example: 'This is a campaign'
        max_appts:
          description: 'Maximum amount of appointments you want to allow per hour. 0 will be unlimited.'
          type: integer
          default: 0
        dealer_transportation:
          description: 'A dealer is willing to pick up customers (0 for no, 1 for yes)'
          type: boolean
          default: 0
        mailer_url:
          description: 'Mailer Image URL'
          type: string
          maxLength: 255
          example: 'https://mailer_image_url.com/image_name.jpg'
        campaign_qty:
          description: 'Direct Mail Quantity'
          type: integer
          example: 10000

    Dealer:
      type: object
      required:
        - client_id
        - company
        - address
        - city
        - state
        - zip
        - phone_company
        - time_zone
      properties:
        client_id:
          description: 'Your Client ID from CloudOne'
          type: integer
          example: 400007
        company:
          description: 'Dealer Name'
          type: string
          maxLength: 100
          example: 'Test Dealer'
        address:
          description: 'Dealer Address'
          type: string
          maxLength: 100
          example: '123 Fake St'
        city:
          description: 'Dealer City'
          type: string
          maxLength: 100
          example: 'Vancouver'
        state:
          description: 'Dealer State'
          type: string
          maxLength: 2
          example: 'WA'
        zip:
          description: 'Dealer Zip'
          type: integer
          maximum: 99999
          example: 98663
        phone_company:
          description: 'Dealer Phone'
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 1234567890
        time_zone:
          description: 'Dealer Time Zone'
          type: string
          maxLength: 30
          example: 'US/Pacific'
        dba:
          description: 'Dealer DBA'
          type: string
          maxLength: 100
          example: 'Test DBA'
        address2:
          description: 'Dealer Address2'
          type: string
          maxLength: 100
          example: 'Suite 321'
        phone_fax:
          description: 'Dealer Fax'
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 1234567890
        website:
          description: 'Dealer Website'
          type: string
          maxLength: 255
          example: 'http://www.example.com'
        pronunciation:
          description: 'Pronunciation of the dealer'
          type: string
          maxLength: 100
          example: 'test'
        billing_name_first:
          type: string
          maxLength: 50
          example: 'Fake'
        billing_name_last:
          type: string
          maxLength: 50
          example: 'Fakington'
        billing_address1:
          type: string
          maxLength: 100
          example: '123 Fake St'
        billing_address2:
          type: string
          maxLength: 100
          example: 'Suite 321'
        billing_city:
          type: string
          maxLength: 30
          example: 'Vancouver'
        billing_state:
          type: string
          maxLength: 2
          example: 'WA'
        billing_zip:
          type: integer
          maximum: 99999
          example: 98663
        billing_email:
          type: string
          maxLength: 255
          example: 'billing@example.com'
        billing_phone:
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 3456789012
        billing_phone_ext:
          type: integer
          example: 123
        billing_fax:
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 4567890123
        lat:
          type: number
          format: float
          example: 45.48485000
        lng:
          type: number
          format: float
          example: -122.55700500
        status:
          description: '0 = Paused, 1 = Active, 2 = Pending, 3 = Cancelled,  4 = Billing Issue'
          type: integer
          example: 0

    Lead:
      type: object
      required:
        - external_id
        - name_first
        - name_last
      properties:
        external_id:
          description: 'Your customer identifier'
          type: string
          maxLength: 40
          example: '1234567'
        name_first:
          type: string
          maxLength: 50
          example: 'John'
        name_last:
          type: string
          maxLength: 50
          example: 'Smith'
        name_middle:
          description: 'Can be full middle name or initial'
          type: string
          maxLength: 50
          example: 'T'
        language:
          description: 'Language spoken by lead'
          type: string
          maxLength: 2
          example: 'en'
        source:
          description: 'Lead source'
          type: string
          maxLength: 50
          example: 'CreditYes'
        ssn:
          description: 'social security number'
          type: number
          minimum: 100000000
          maximum: 999999999
          example: 111223333
        credit_permission:
          description: 'permission to run credit'
          type: boolean
          example: true
        birthday:
          description: "Date format:\n\n[year]-[month]-[day]"
          type: string
          maxLength: 10
          format: date
          example: '1978-7-11'
        coapp_relation:
          type: string
          maxLength: 25
          example: 'Wife'
        coapp_income:
          type: number
          example: 3000
        phone_home:
          type: number
          minimum: 1000000000
          maximum: 9999999999
          example: 1112223333
        phone_work:
          type: number
          minimum: 1000000000
          maximum: 9999999999
          example: 2223334444
        phone_cell:
          type: number
          minimum: 1000000000
          maximum: 9999999999
          example: 3334445555
        preferred_phone:
          type: string
          description: |
            One of:
            - Cell
            - Work
            - Home
          example: 'Home'
        confirmation_pref:
          type: string
          description: "Where the lead wants to receive alerts. \n\n One of: \n\n - Text \n\n - Email \n\n - Both"
          example: 'Text'
        email:
          description: 'Email address'
          type: string
          format: email
          maxLength: 100
          example: 'test@example.com'
        address:
          description: 'Street address'
          type: string
          maxLength: 100
          example: '123 Fake St'
        city:
          type: string
          maxLength: 50
          example: 'Portland'
        state:
          type: string
          maxLength: 2
          example: 'OR'
        zip:
          description: 'Zip code'
          type: string
          maxLength: 10
          example: '99999'
        rent_total:
          type: number
          example: 850
        prev_address:
          description: 'Previous street address'
          type: string
          maxLength: 100
          example: '321 Fake St'
        prev_city:
          description: 'Previous city'
          type: string
          maxLength: 50
          example: 'Portland'
        prev_state:
          description: 'Previous state'
          type: string
          maxLength: 2
          example: 'OR'
        prev_zip_code:
          description: 'Previous zip code'
          type: string
          maxLength: 10
          example: '90000'
        additional_income:
          description: 'Other monthly income'
          type: number
          example: 1000
        prev_employer:
          description: 'Previous employer'
          type: string
          maxLength: 100
          example: 'Previous Company'
        employment_gap:
          description: 'Employment gap in years'
          type: integer
          example: 3
        trade_year:
          type: integer
          example: 1999
        trade_make:
          type: string
          maxLength: 50
          example: 'Pontiac'
        trade_model:
          type: string
          maxLength: 50
          example: 'Grand Am'
        trade_mileage:
          type: integer
          example: 95000
        trade_monthly_payment:
          description: 'Money format e.g. $475.95'
          type: number
          example: 300
        trade_color:
          type: string
          maxLength: 25
          example: 'Silver'
        trade_retail:
          description: 'Money format e.g. 30000.00'
          type: number
          example: 3000
        trade_wholesale:
          description: 'Money format e.g. 27000.00'
          type: number
          example: 2000
        trade_book:
          type: string
          maxLength: 20
          example: 'Blue Book'
        military:
          description: '1 for military, 0 for non-military'
          type: boolean
          example: '0'
        military_length:
          description: 'Months in military'
          type: integer
          example: 0
        military_pay_grade:
          type: string
          maxLength: 15
        military_ets:
          description: 'Military Expiration, Term of Service, e.g. 2015-01-31'
          type: string
          format: date
          example: '0000-00-00'
        appt_date:
          description: 'Local timezone, appointment date & time'
          type: string
          format: date-time
          example: '2012-08-30 09:15:00'
        ip_address:
          description: "Lead's IP address"
          type: string
          maxLength: 15
          example: '127.0.0.1'
        sms_permission:
          description: 'Permission to send text message'
          type: boolean
          example: '1'

    LeadsActivation:
      type: object
      required:
        - activation_code
      properties:
        activation_code:
          type: string
          example: '7654321'
        name_first:
          type: string
          maxLength: 50
          example: 'Fake'
        name_last:
          type: string
          maxLength: 50
          example: 'Fakington'
        address:
          type: string
          maxLength: 100
          example: '321 Test Ave'
        address2:
          type: string
          maxLength: 100
          example: 'Apt 123'
        city:
          type: string
          maxLength: 50
          example: 'Schenectady'
        state:
          type: string
          maxLength: 2
          example: 'NY'
        zip:
          type: integer
          maximum: 99999
          example: 12345
        phone:
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 1234567890
        year:
          type: integer
          maximum: 9999
          example: 2010
        make:
          type: string
          maxLength: 50
          example: 'Honda'
        model:
          type: string
          maxLength: 50
          example: 'Civic'
        score:
          type: number
          example: 750
        our_offer:
          type: number
          maximum: 999999999
          example: 7500
        value_rough:
          type: number
          maximum: 999999999
          example: 7331
        value_average:
          type: number
          maximum: 999999999
          example: 8148
        value_clean:
          type: number
          maximum: 999999999
          example: 8413
        custom1:
          type: string
          maxLength: 255
          example: 'Custom Data Here'
        custom2:
          type: string
          maxLength: 255
          example: 'Custom Data Here'
        custom3:
          type: string
          maxLength: 255
          example: 'Custom Data Here'
        custom4:
          type: string
          maxLength: 255
          example: 'Custom Data Here'
        custom5:
          type: string
          maxLength: 255
          example: 'Custom Data Here'
        vin:
          type: string
          maxLength: 17

    Phone:
      type: object
      required:
        - area_code
        - zip_code
        - label
      properties:
        area_code:
          description: 'Area Code'
          type: integer
          minimum: 100
          maximum: 999
          example: 346
        zip_code:
          description: 'Zip Code'
          type: integer
          minimum: 10000
          maximum: 99999
          example: 12345
        label:
          type: string
          example: "Test Number"
        redirect_number:
          type: integer
          example: 5551234567
        whisper:
          type: boolean
          example: true
        phone_type:
          description: "1 = Call Center,\n\n
            2 = Call Forward,\n\n
            3 = IVR,\n\n
            4 = IVR + Call Center.\n\n
            If you set phone_type = 1, the redirect_number will be removed."
          type: integer
          minimum: 1
          maximum: 4
          example: 1

    User:
      type: object
      required:
        - name_first
        - name_last
        - user_name
        - password
      properties:
        name_first:
          description: 'The users first name'
          type: string
          maxLength: 50
          example: 'Test'
        name_last:
          description: 'The users last name'
          type: string
          maxLength: 50
          example: 'Testington'
        user_name:
          description: 'The username'
          type: string
          maxLength: 50
          example: 'test'
        password:
          description: 'The password'
          type: string
          format: password
          maxLength: 50
          example: '123##'
        phone_cell:
          description: 'The users cell phone'
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 1234567890
        phone_work:
          description: 'The users work phone'
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 9876543210
        phone_work_ext:
          description: 'The users work phone extension'
          type: integer
          example: 123
        email:
          description: 'The users email'
          type: string
          format: email
          maxLength: 100
          example: 'test@example.com'