openapi: 3.0.0
servers:
  - description: Base URL template
    url: '{protocol}://{domain}/{version}'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
        description: 'The CloudOne API is served over HTTPS. To ensure data privacy, unencrypted HTTP is not supported.'
      domain:
        default: 'api.cloudone.com'
      version:
        default: 'v4'

info:
  title: 'CloudOne API Service'
  description: "The CloudOne API allows you to interact with our call center including creating dealer accounts and campaigns.
    \n\n
    Since the API is based on REST principles, it's very easy to write and test applications. You can use your browser to access URLs, and you can use pretty much any HTTP client in any programming language to interact with the API.
    \n\n
    All API calls use API key and IP restriction. Prior to use you will need to supply your IP addresses to your account representative so they can be added to your account."
  version: '1.0.0'
  contact:
    email: you@your-company.com

security:
  - client_id: []
  - api_key: []

tags:
  - name: hidden
    description: 'Only for internal use'
  - name: Activation
    description: 'You are able to add and delete activation for your campaigns.'
  - name: Alert
    description: "You are able to add, list and delete alerts for your campaigns.\n\n
      If there is a CRM that you would like added please email support@cloudone.com"
  - name: User
    description: 'You are able to add, list, get info, update and delete users for your dealers.'

paths:
  '/internal-example':
    get:
      tags:
          - hidden
      responses:
        '200':
          description: ''

  '/activations':
    post:
      tags:
        - Activation
      operationId: addActivation
      description: 'You are able to add activation for your campaigns.'
      parameters:
        - name: campaign_id
          in: header
          description: 'Campaign ID or External Campaign ID'
          required: true
          schema:
            type: string
            example: 4
        - name: custom_variable
          in: header
          description: 'Changes activation code label on script if provided'
          schema:
            type: string
            example: 'Pin Code'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                codes:
                  type: array
                  items:
                    $ref: '#/components/schemas/LeadsActivation'
              example: 
                {
                  "codes":
                  [
                    {
                      "activation_code": "1234567",
                      "name_first": "Test",
                      "name_last": "Testington",
                      "address": "123 Fake St",
                      "city": "Portland",
                      "state": "OR",
                      "zip": "97202"
                    },
                    {
                      "activation_code": "7654321",
                      "name_first": "Fake",
                      "name_last": "Fakington",
                      "address": "321 Test Ave",
                      "address2": "Apt 123",
                      "city": "Schenectady",
                      "state": "NY",
                      "zip": "12345",
                      "year": "2010",
                      "make": "Honda",
                      "model": "Civic",
                      "score": "750",
                      "our_offer": "7500",
                      "value_rough": "7331",
                      "value_average": "8148",
                      "value_clean": "8413",
                      "custom1": "Custom Data Here",
                      "custom2": "Custom Data Here",
                      "custom3": "Custom Data Here",
                      "custom4": "Custom Data Here",
                      "custom5": "Custom Data Here"
                    }
                  ]
                }
        description: 'Activation codes to add'
      responses:
        '200':
          description: 'Activation codes have been processed successfully'
          content:
            application/json:
              example: 
                success: 'yes'
                total_added: 20
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Campaign not found'
    delete:
      tags:
        - Activation
      operationId: deleteActivation
      description: 'You are able to delete activation for your campaigns.'
      parameters:
        - name: campaign_id
          in: header
          description: 'Campaign ID or External Campaign ID'
          required: true
          schema:
            type: string
            example: 4
        - name: delete_all
          in: header
          description: 'Use this to delete all or a list of activation codes'
          schema:
            type: boolean
            default: false
        - name: codes
          in: query
          required: true
          description: 'A list of activation codes'
          schema:
            type: array
            items:
              type: integer
            minItems: 1
          style: form
          explode: false
          example: [7654321]
      responses:
        '200':
          description: 'Activation codes have been deleted successfully'
          content:
            application/json:
              example: 
                success: 'yes'
                total_deleted: 2
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Campaign not found'

  '/alerts':
    get:
      tags:
        - Alert
      operationId: getAlerts
      description: 'You are able to get list of alerts for your campaigns.'
      parameters:
        - name: campaign_id
          in: header
          description: 'Campaign ID'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          description: 'Returns a list of alerts'
          content:
            application/json:
              example: 
                [
                  {
                    "alert_id": "86804",
                    "category": "CRM Post",
                    "alert_type": "VinSolutions",
                    "destination": "123456",
                    "status_types": {
                      "hot": "1",
                      "warm": "1",
                      "cold": "1",
                      "other": "0"
                    }
                  },
                  {
                    "alert_id": "86803",
                    "category": "Email",
                    "alert_type": "HTML Email",
                    "destination": "test@example.com",
                    "status_types": {
                      "hot": "1",
                      "warm": "1",
                      "cold": "1",
                      "other": "0"
                    }
                  },
                  {
                    "alert_id": "86802",
                    "category": "SMS",
                    "alert_type": "SMS",
                    "destination": "5035555555",
                    "status_types": {
                      "hot": "1",
                      "warm": "0",
                      "cold": "0",
                      "other": "0"
                    }
                  },
                  {
                    "alert_id": "86801",
                    "category": "CRM Email",
                    "alert_type": "adf",
                    "destination": "test2@example.com",
                    "status_types": {
                      "hot": "1",
                      "warm": "0",
                      "cold": "1",
                      "other": "1"
                    }
                  }
                ]
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Campaign not found'
    post:
      tags:
        - Alert
      operationId: addAlerts
      description: 'You are able to add alerts.'
      parameters:
        - name: campaign_id
          in: header
          description: 'Campaign ID'
          required: true
          schema:
            type: string
            example: 123456
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                campaign:
                  type: object
                  properties:
                    email_settings:
                      type: object
                      properties:
                        from_name:
                          type: string
                          description: 'Campaign'
                          example: 'ABC'
                        from_email_address:
                          type: string
                          description: 'Campaign'
                          format: email
                          example: 'ABC@cloudone.com'
                        email_subject:
                          type: string
                          description: 'Campaign'
                          example: 'subject'
                    alerts:
                      type: array
                      items:
                        $ref: '#/components/schemas/Alert'
                lead:
                  type: object
                  properties:
                    appointment_confirmation:
                      type: boolean
                      description: "\"1\" or \"0\" if you want CloudBDC to email Leads on the Customer's behalf"
                      default: true
                    appointment_reminder:
                      type: boolean
                      description: "\"1\" or \"0\" if you want CloudBDC to email or sms lead reminder on the Customer's behalf"
                      default: true
                    from_email_address:
                      type: string
                      description: 'This is the email that should show up when sending an email. eg. alerts@cloudbdc.com'
                      format: email
                      example: 'abccdf@cloudone.com'
                    from_name:
                      type: string
                      description: 'This is the name that should show up when sending an email. eg. ABC Automotive'
                      example: 'CloudOne'
            example:
              {
                "campaign": {
                  "email_settings": {
                    "from_name": "ABC",
                    "from_email_address": "ABC@cloudone.com",
                    "email_subject": "subject"
                  },
                  "alerts":
                  [
                    {
                      "category": "crm_email",
                      "address": "test2@example.com",
                      "type": "adf",
                      "status_types": {
                        "hot": "1",
                        "warm": "0",
                        "cold": "1",
                        "other": "1"
                      }
                    },
                    {
                      "category": "sms",
                      "name": "fake_name",
                      "number": "5035555555",
                      "status_types": {
                        "hot": "1",
                        "warm": "0",
                        "cold": "0",
                        "other": "0"
                      }
                    },
                    {
                      "category": "email",
                      "address": "test@example.com",
                      "type": "html"
                    },
                    {
                      "category": "crm_post",
                      "crm_dealer_id": "123456",
                      "type": "VinSolutions"
                    }
                  ]
                },
                "lead": {
                  "appointment_confirmation": "1",
                  "appointment_reminder": "1",
                  "from_email_address": "abccdf@cloudone.com",
                  "from_name": "CloudOne"
                }
              }
        description: 'Alert info'
      responses:
        '200':
          description: 'Alerts have been added successfully'
          content:
            application/json:
              example: 
                [
                  {
                    "Error": "0",
                    "Message": "Successfully created alert #86801 for test2@example.com. Alert type = adf and category = Crm Email",
                    "Posted": {
                      "category": "crm_email",
                      "address": "test2@example.com",
                      "type": "adf",
                      "status_types": {
                        "hot": "1",
                        "warm": "0",
                        "cold": "1",
                        "other": "1"
                      }
                    }
                  },
                  {
                    "Error": "0",
                    "Message": "Successfully created alert #86802 for 5035555555. SMS number = 5035555555 and category = Sms",
                    "Posted": {
                      "category": "sms",
                      "name": "fake_name",
                      "number": "5035555555",
                      "status_types": {
                        "hot": "1",
                        "warm": "0",
                        "cold": "0",
                        "other": "0"
                      }
                    }
                  },
                  {
                    "Error": "0",
                    "Message": "Successfully created alert #86803 for test@example.com. Alert type = html and category = Email",
                    "Posted": {
                      "category": "email",
                      "address": "test@example.com",
                      "type": "html"
                    }
                  },
                  {
                    "Error": "0",
                    "Message": "Successfully created alert #86804 for . Alert type =  and category = Crm Post",
                    "Posted": {
                      "category": "crm_post",
                      "crm_dealer_id": "123456",
                      "type": "VinSolutions"
                    }
                  },
                  {
                    "Error": "0",
                    "Message": "Created Lead Alert",
                    "Posted": {
                      "appointment_confirmation": "1",
                      "appointment_reminder": "1",
                      "from_email_address": "abccdf@cloudone.com",
                      "from_name": "CloudOne"
                    }
                  }
                ]
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Campaign not found'

  '/alerts/{id}':
    delete:
      tags:
        - Alert
      operationId: deleteAlerts
      description: 'You are able to delete alert by id.'
      parameters:
        - name: id
          in: path
          description: 'Alert ID'
          required: true
          schema:
            type: string
            example: 572
        - name: campaign_id
          in: header
          description: 'Campaign ID'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          description: 'Alert has been deleted successfully'
          content:
            application/json:
              example: 
                {
                  "alert_id": "572"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'Alert or Campaign not found'

  '/users':
    get:
      tags:
        - User
      operationId: getUsers
      description: 'You are able to get list of users for your dealers.'
      parameters:
        - name: dealer_id
          in: header
          description: 'Dealer ID'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          description: 'Returns a list of users'
          content:
            application/json:
              example: 
                [
                  {
                    "user_id": "654321",
                    "name": "Fake Fakington"
                  },
                  {
                    "user_id": "654322",
                    "name": "Test Testington"
                  }
                ]
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - User
      operationId: addUser
      description: 'You are able to add user.'
      parameters:
        - name: dealer_id
          in: header
          description: 'Dealer ID'
          required: true
          schema:
            type: string
            example: 654321
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example: 
              {
                "name_first": "Test",
                "name_last": "Testington",
                "user_name": "test",
                "password": "123##",
                "phone_cell": "1234567890",
                "phone_work": "9876543210",
                "phone_work_ext": "123",
                "email": "test@example.com"
              }
        description: 'User info'
      responses:
        '200':
          description: 'User has been added successfully'
          content:
            application/json:
              example: 
                {
                  "user_id": "54321"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"

  '/users/{id}':
    get:
      tags:
        - User
      operationId: getUserById
      description: 'You are able to get user info by id.'
      parameters:
        - name: id
          in: path
          description: 'The user ID'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          description: 'Returns user info'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example: 
                {
                  "user_id": "654321",
                  "name_first": "Test",
                  "name_last": "Testington",
                  "user_name": "test",
                  "phone_cell": "1234567890",
                  "phone_work": "9876543210",
                  "phone_work_ext": "123"
                }
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'User not found'
    put:
      tags:
        - User
      operationId: updateUser
      description: 'You are able to update user by id.'
      parameters:
        - name: id
          in: path
          description: 'The user ID'
          required: true
          schema:
            type: string
            example: 123456
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              {
                "name_first": "Test",
                "name_last": "Testington",
                "user_name": "test",
                "password": "123##",
                "phone_cell": "9876543210",
                "phone_work": "8765432109",
                "phone_work_ext": "9876543210",
                "email": "test@example.com"
              }
        description: 'User info'
      responses:
        '200':
          description: 'User has been updated successfully'
          content:
            application/json:
              example: 
                {
                  "user_id": "54321",
                  "name_first": "Test",
                  "name_last": "Testington",
                  "user_name": "test",
                  "password": "123##",
                  "phone_cell": "9876543210",
                  "phone_work": "8765432109",
                  "phone_work_ext": "9876543210",
                  "email": "test@example.com"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'User not found'
    delete:
      tags:
        - User
      operationId: deleteUser
      description: 'You are able to delete user by id.'
      parameters:
        - name: id
          in: path
          description: 'The user ID'
          required: true
          schema:
            type: string
            example: 123456
      responses:
        '200':
          description: 'User has been deleted successfully'
          content:
            application/json:
              example: 
                {
                  "user_id": "54321"
                }
        '400':
          $ref: "#/components/responses/BadRequestError"
        '401':
           $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: 'User not found'

components:
  securitySchemes:
    client_id:
      type: apiKey
      in: header
      name: client_id
      description: 'Your Client ID is a 6 digit number located in XXXXXXX.'
    api_key:
      type: apiKey
      in: header
      name: api_key
      description: 'Your API Key can be found in the API section of your account dashboard.'

  responses:
    UnauthorizedError:
      description: 'Invalid client_id or api_key'
      headers:
        client_id:
          $ref: "#/components/securitySchemes/client_id"
        api_key:
          $ref: "#/components/securitySchemes/api_key"
    BadRequestError:
      description: 'Invalid input, bad request'

  schemas:
    Alert:
      type: object
      required:
        - category
      properties:
        category:
          description: '"email", "sms", "crm_email", or "crm_post"'
          type: string
          maxLength: 100
          example: 'crm_email'
        status_types:
          type: object
          properties:
            hot:
              type: boolean
              description: 'Flag to turn off or on.'
              default: true
            warm:
              type: boolean
              description: 'Flag to turn off or on.'
              default: true
            cold:
              type: boolean
              description: 'Flag to turn off or on.'
              default: true
            other:
              type: boolean
              description: 'Flag to turn off or on.'
              default: false
        address:
          description: 'Required if category "email" or "crm_email"'
          type: string
          format: email
          maxLength: 100
          example: 'test2@example.com'
        type:
          description: |
            \"text\" or \"html\" and required if category \"email\".

            \"ADF\" and required if category \"crm_email\" or \"crm_post\".
          type: string
          maxLength: 30
          example: 'adf'
        name:
          description: 'Required if category "sms"'
          type: string
          maxLength: 50
          example: 'fake_name'
        number:
          description: 'Required if category "sms"'
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 5035555555
        crm_dealer_id:
          description: 'Required if category "crm_post"'
          type: string
          maxLength: 100
          example: '123456'

    LeadsActivation:
      type: object
      required:
        - activation_code
      properties:
        activation_code:
          type: string
          example: '7654321'
        name_first:
          type: string
          maxLength: 50
          example: 'Fake'
        name_last:
          type: string
          maxLength: 50
          example: 'Fakington'
        address:
          type: string
          maxLength: 100
          example: '321 Test Ave'
        address2:
          type: string
          maxLength: 100
          example: 'Apt 123'
        city:
          type: string
          maxLength: 50
          example: 'Schenectady'
        state:
          type: string
          maxLength: 2
          example: 'NY'
        zip:
          type: integer
          maximum: 99999
          example: 12345
        phone:
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 1234567890
        year:
          type: integer
          maximum: 9999
          example: 2010
        make:
          type: string
          maxLength: 50
          example: 'Honda'
        model:
          type: string
          maxLength: 50
          example: 'Civic'
        score:
          type: number
          example: 750
        our_offer:
          type: number
          maximum: 999999999
          example: 7500
        value_rough:
          type: number
          maximum: 999999999
          example: 7331
        value_average:
          type: number
          maximum: 999999999
          example: 8148
        value_clean:
          type: number
          maximum: 999999999
          example: 8413
        custom1:
          type: string
          maxLength: 255
          example: 'Custom Data Here'
        custom2:
          type: string
          maxLength: 255
          example: 'Custom Data Here'
        custom3:
          type: string
          maxLength: 255
          example: 'Custom Data Here'
        custom4:
          type: string
          maxLength: 255
          example: 'Custom Data Here'
        custom5:
          type: string
          maxLength: 255
          example: 'Custom Data Here'
        vin:
          type: string
          maxLength: 17

    User:
      type: object
      required:
        - name_first
        - name_last
        - user_name
        - password
      properties:
        name_first:
          description: 'The users first name'
          type: string
          maxLength: 50
          example: 'Test'
        name_last:
          description: 'The users last name'
          type: string
          maxLength: 50
          example: 'Testington'
        user_name:
          description: 'The username'
          type: string
          maxLength: 50
          example: 'test'
        password:
          description: 'The password'
          type: string
          maxLength: 50
          example: '123##'
        phone_cell:
          description: 'The users cell phone'
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 1234567890
        phone_work:
          description: 'The users work phone'
          type: integer
          minimum: 1000000000
          maximum: 9999999999
          example: 9876543210
        phone_work_ext:
          description: 'The users work phone extension'
          type: integer
          example: 123
        email:
          description: 'The users email'
          type: string
          format: email
          maxLength: 100
          example: 'test@example.com'